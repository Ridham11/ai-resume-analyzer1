generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  hashedPassword String   // Changed from 'password' to match your auth code
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resumes   Resume[]

  @@map("users")
  @@index([email])
}

model Resume {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileName     String
  filePath     String
  fileType     String
  fileSize     Int
  originalText String   @db.Text
  uploadedAt   DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  overallScore Int?
  atsScore     Int?
  
  contactInfo  Json?
  experience   Json?
  education    Json?
  skills       Json?
  
  strengths    String[]
  weaknesses   String[]
  suggestions  String[]
  keySkills    String[]
  summary      String?  @db.Text
  
  matchedKeywords  String[]
  missingKeywords  String[]
  keywordDensity   Json?
  
  jobDescriptions  JobDescription[]
  analysisHistory  AnalysisHistory[]

  @@map("resumes")
  @@index([userId])
  @@index([uploadedAt])
}

model JobDescription {
  id               Int      @id @default(autoincrement())
  resumeId         Int
  resume           Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  jobTitle         String?
  company          String?
  description      String   @db.Text
  requiredKeywords String[]
  createdAt        DateTime @default(now())

  @@map("job_descriptions")
  @@index([resumeId])
}

model AnalysisHistory {
  id         Int      @id @default(autoincrement())
  resumeId   Int
  resume     Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  score      Int
  analyzedAt DateTime @default(now())

  @@map("analysis_history")
  @@index([resumeId])
  @@index([analyzedAt])
}