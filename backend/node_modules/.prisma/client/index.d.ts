
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Resume
 * 
 */
export type Resume = $Result.DefaultSelection<Prisma.$ResumePayload>
/**
 * Model JobDescription
 * 
 */
export type JobDescription = $Result.DefaultSelection<Prisma.$JobDescriptionPayload>
/**
 * Model AnalysisHistory
 * 
 */
export type AnalysisHistory = $Result.DefaultSelection<Prisma.$AnalysisHistoryPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.resume`: Exposes CRUD operations for the **Resume** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Resumes
    * const resumes = await prisma.resume.findMany()
    * ```
    */
  get resume(): Prisma.ResumeDelegate<ExtArgs>;

  /**
   * `prisma.jobDescription`: Exposes CRUD operations for the **JobDescription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobDescriptions
    * const jobDescriptions = await prisma.jobDescription.findMany()
    * ```
    */
  get jobDescription(): Prisma.JobDescriptionDelegate<ExtArgs>;

  /**
   * `prisma.analysisHistory`: Exposes CRUD operations for the **AnalysisHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnalysisHistories
    * const analysisHistories = await prisma.analysisHistory.findMany()
    * ```
    */
  get analysisHistory(): Prisma.AnalysisHistoryDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Resume: 'Resume',
    JobDescription: 'JobDescription',
    AnalysisHistory: 'AnalysisHistory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "resume" | "jobDescription" | "analysisHistory"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Resume: {
        payload: Prisma.$ResumePayload<ExtArgs>
        fields: Prisma.ResumeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResumeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResumeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          findFirst: {
            args: Prisma.ResumeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResumeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          findMany: {
            args: Prisma.ResumeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>[]
          }
          create: {
            args: Prisma.ResumeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          createMany: {
            args: Prisma.ResumeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResumeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>[]
          }
          delete: {
            args: Prisma.ResumeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          update: {
            args: Prisma.ResumeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          deleteMany: {
            args: Prisma.ResumeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResumeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ResumeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          aggregate: {
            args: Prisma.ResumeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResume>
          }
          groupBy: {
            args: Prisma.ResumeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResumeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResumeCountArgs<ExtArgs>
            result: $Utils.Optional<ResumeCountAggregateOutputType> | number
          }
        }
      }
      JobDescription: {
        payload: Prisma.$JobDescriptionPayload<ExtArgs>
        fields: Prisma.JobDescriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobDescriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobDescriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobDescriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobDescriptionPayload>
          }
          findFirst: {
            args: Prisma.JobDescriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobDescriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobDescriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobDescriptionPayload>
          }
          findMany: {
            args: Prisma.JobDescriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobDescriptionPayload>[]
          }
          create: {
            args: Prisma.JobDescriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobDescriptionPayload>
          }
          createMany: {
            args: Prisma.JobDescriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobDescriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobDescriptionPayload>[]
          }
          delete: {
            args: Prisma.JobDescriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobDescriptionPayload>
          }
          update: {
            args: Prisma.JobDescriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobDescriptionPayload>
          }
          deleteMany: {
            args: Prisma.JobDescriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobDescriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JobDescriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobDescriptionPayload>
          }
          aggregate: {
            args: Prisma.JobDescriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobDescription>
          }
          groupBy: {
            args: Prisma.JobDescriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobDescriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobDescriptionCountArgs<ExtArgs>
            result: $Utils.Optional<JobDescriptionCountAggregateOutputType> | number
          }
        }
      }
      AnalysisHistory: {
        payload: Prisma.$AnalysisHistoryPayload<ExtArgs>
        fields: Prisma.AnalysisHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnalysisHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalysisHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnalysisHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalysisHistoryPayload>
          }
          findFirst: {
            args: Prisma.AnalysisHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalysisHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnalysisHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalysisHistoryPayload>
          }
          findMany: {
            args: Prisma.AnalysisHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalysisHistoryPayload>[]
          }
          create: {
            args: Prisma.AnalysisHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalysisHistoryPayload>
          }
          createMany: {
            args: Prisma.AnalysisHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnalysisHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalysisHistoryPayload>[]
          }
          delete: {
            args: Prisma.AnalysisHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalysisHistoryPayload>
          }
          update: {
            args: Prisma.AnalysisHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalysisHistoryPayload>
          }
          deleteMany: {
            args: Prisma.AnalysisHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnalysisHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AnalysisHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalysisHistoryPayload>
          }
          aggregate: {
            args: Prisma.AnalysisHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnalysisHistory>
          }
          groupBy: {
            args: Prisma.AnalysisHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnalysisHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnalysisHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<AnalysisHistoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    resumes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resumes?: boolean | UserCountOutputTypeCountResumesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountResumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeWhereInput
  }


  /**
   * Count Type ResumeCountOutputType
   */

  export type ResumeCountOutputType = {
    jobDescriptions: number
    analysisHistory: number
  }

  export type ResumeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobDescriptions?: boolean | ResumeCountOutputTypeCountJobDescriptionsArgs
    analysisHistory?: boolean | ResumeCountOutputTypeCountAnalysisHistoryArgs
  }

  // Custom InputTypes
  /**
   * ResumeCountOutputType without action
   */
  export type ResumeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeCountOutputType
     */
    select?: ResumeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ResumeCountOutputType without action
   */
  export type ResumeCountOutputTypeCountJobDescriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobDescriptionWhereInput
  }

  /**
   * ResumeCountOutputType without action
   */
  export type ResumeCountOutputTypeCountAnalysisHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnalysisHistoryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    hashedPassword: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    hashedPassword: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    hashedPassword: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    hashedPassword?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    hashedPassword?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    hashedPassword?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    name: string | null
    hashedPassword: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    hashedPassword?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resumes?: boolean | User$resumesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    hashedPassword?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    hashedPassword?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resumes?: boolean | User$resumesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      resumes: Prisma.$ResumePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      name: string | null
      hashedPassword: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resumes<T extends User$resumesArgs<ExtArgs> = {}>(args?: Subset<T, User$resumesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly hashedPassword: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.resumes
   */
  export type User$resumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeInclude<ExtArgs> | null
    where?: ResumeWhereInput
    orderBy?: ResumeOrderByWithRelationInput | ResumeOrderByWithRelationInput[]
    cursor?: ResumeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeScalarFieldEnum | ResumeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Resume
   */

  export type AggregateResume = {
    _count: ResumeCountAggregateOutputType | null
    _avg: ResumeAvgAggregateOutputType | null
    _sum: ResumeSumAggregateOutputType | null
    _min: ResumeMinAggregateOutputType | null
    _max: ResumeMaxAggregateOutputType | null
  }

  export type ResumeAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    fileSize: number | null
    overallScore: number | null
    atsScore: number | null
  }

  export type ResumeSumAggregateOutputType = {
    id: number | null
    userId: number | null
    fileSize: number | null
    overallScore: number | null
    atsScore: number | null
  }

  export type ResumeMinAggregateOutputType = {
    id: number | null
    userId: number | null
    fileName: string | null
    filePath: string | null
    fileType: string | null
    fileSize: number | null
    originalText: string | null
    uploadedAt: Date | null
    updatedAt: Date | null
    overallScore: number | null
    atsScore: number | null
    summary: string | null
  }

  export type ResumeMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    fileName: string | null
    filePath: string | null
    fileType: string | null
    fileSize: number | null
    originalText: string | null
    uploadedAt: Date | null
    updatedAt: Date | null
    overallScore: number | null
    atsScore: number | null
    summary: string | null
  }

  export type ResumeCountAggregateOutputType = {
    id: number
    userId: number
    fileName: number
    filePath: number
    fileType: number
    fileSize: number
    originalText: number
    uploadedAt: number
    updatedAt: number
    overallScore: number
    atsScore: number
    contactInfo: number
    experience: number
    education: number
    skills: number
    strengths: number
    weaknesses: number
    suggestions: number
    keySkills: number
    summary: number
    matchedKeywords: number
    missingKeywords: number
    keywordDensity: number
    _all: number
  }


  export type ResumeAvgAggregateInputType = {
    id?: true
    userId?: true
    fileSize?: true
    overallScore?: true
    atsScore?: true
  }

  export type ResumeSumAggregateInputType = {
    id?: true
    userId?: true
    fileSize?: true
    overallScore?: true
    atsScore?: true
  }

  export type ResumeMinAggregateInputType = {
    id?: true
    userId?: true
    fileName?: true
    filePath?: true
    fileType?: true
    fileSize?: true
    originalText?: true
    uploadedAt?: true
    updatedAt?: true
    overallScore?: true
    atsScore?: true
    summary?: true
  }

  export type ResumeMaxAggregateInputType = {
    id?: true
    userId?: true
    fileName?: true
    filePath?: true
    fileType?: true
    fileSize?: true
    originalText?: true
    uploadedAt?: true
    updatedAt?: true
    overallScore?: true
    atsScore?: true
    summary?: true
  }

  export type ResumeCountAggregateInputType = {
    id?: true
    userId?: true
    fileName?: true
    filePath?: true
    fileType?: true
    fileSize?: true
    originalText?: true
    uploadedAt?: true
    updatedAt?: true
    overallScore?: true
    atsScore?: true
    contactInfo?: true
    experience?: true
    education?: true
    skills?: true
    strengths?: true
    weaknesses?: true
    suggestions?: true
    keySkills?: true
    summary?: true
    matchedKeywords?: true
    missingKeywords?: true
    keywordDensity?: true
    _all?: true
  }

  export type ResumeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Resume to aggregate.
     */
    where?: ResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resumes to fetch.
     */
    orderBy?: ResumeOrderByWithRelationInput | ResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Resumes
    **/
    _count?: true | ResumeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResumeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResumeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResumeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResumeMaxAggregateInputType
  }

  export type GetResumeAggregateType<T extends ResumeAggregateArgs> = {
        [P in keyof T & keyof AggregateResume]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResume[P]>
      : GetScalarType<T[P], AggregateResume[P]>
  }




  export type ResumeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeWhereInput
    orderBy?: ResumeOrderByWithAggregationInput | ResumeOrderByWithAggregationInput[]
    by: ResumeScalarFieldEnum[] | ResumeScalarFieldEnum
    having?: ResumeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResumeCountAggregateInputType | true
    _avg?: ResumeAvgAggregateInputType
    _sum?: ResumeSumAggregateInputType
    _min?: ResumeMinAggregateInputType
    _max?: ResumeMaxAggregateInputType
  }

  export type ResumeGroupByOutputType = {
    id: number
    userId: number
    fileName: string
    filePath: string
    fileType: string
    fileSize: number
    originalText: string
    uploadedAt: Date
    updatedAt: Date
    overallScore: number | null
    atsScore: number | null
    contactInfo: JsonValue | null
    experience: JsonValue | null
    education: JsonValue | null
    skills: JsonValue | null
    strengths: string[]
    weaknesses: string[]
    suggestions: string[]
    keySkills: string[]
    summary: string | null
    matchedKeywords: string[]
    missingKeywords: string[]
    keywordDensity: JsonValue | null
    _count: ResumeCountAggregateOutputType | null
    _avg: ResumeAvgAggregateOutputType | null
    _sum: ResumeSumAggregateOutputType | null
    _min: ResumeMinAggregateOutputType | null
    _max: ResumeMaxAggregateOutputType | null
  }

  type GetResumeGroupByPayload<T extends ResumeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResumeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResumeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResumeGroupByOutputType[P]>
            : GetScalarType<T[P], ResumeGroupByOutputType[P]>
        }
      >
    >


  export type ResumeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fileName?: boolean
    filePath?: boolean
    fileType?: boolean
    fileSize?: boolean
    originalText?: boolean
    uploadedAt?: boolean
    updatedAt?: boolean
    overallScore?: boolean
    atsScore?: boolean
    contactInfo?: boolean
    experience?: boolean
    education?: boolean
    skills?: boolean
    strengths?: boolean
    weaknesses?: boolean
    suggestions?: boolean
    keySkills?: boolean
    summary?: boolean
    matchedKeywords?: boolean
    missingKeywords?: boolean
    keywordDensity?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    jobDescriptions?: boolean | Resume$jobDescriptionsArgs<ExtArgs>
    analysisHistory?: boolean | Resume$analysisHistoryArgs<ExtArgs>
    _count?: boolean | ResumeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resume"]>

  export type ResumeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fileName?: boolean
    filePath?: boolean
    fileType?: boolean
    fileSize?: boolean
    originalText?: boolean
    uploadedAt?: boolean
    updatedAt?: boolean
    overallScore?: boolean
    atsScore?: boolean
    contactInfo?: boolean
    experience?: boolean
    education?: boolean
    skills?: boolean
    strengths?: boolean
    weaknesses?: boolean
    suggestions?: boolean
    keySkills?: boolean
    summary?: boolean
    matchedKeywords?: boolean
    missingKeywords?: boolean
    keywordDensity?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resume"]>

  export type ResumeSelectScalar = {
    id?: boolean
    userId?: boolean
    fileName?: boolean
    filePath?: boolean
    fileType?: boolean
    fileSize?: boolean
    originalText?: boolean
    uploadedAt?: boolean
    updatedAt?: boolean
    overallScore?: boolean
    atsScore?: boolean
    contactInfo?: boolean
    experience?: boolean
    education?: boolean
    skills?: boolean
    strengths?: boolean
    weaknesses?: boolean
    suggestions?: boolean
    keySkills?: boolean
    summary?: boolean
    matchedKeywords?: boolean
    missingKeywords?: boolean
    keywordDensity?: boolean
  }

  export type ResumeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    jobDescriptions?: boolean | Resume$jobDescriptionsArgs<ExtArgs>
    analysisHistory?: boolean | Resume$analysisHistoryArgs<ExtArgs>
    _count?: boolean | ResumeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ResumeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ResumePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Resume"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      jobDescriptions: Prisma.$JobDescriptionPayload<ExtArgs>[]
      analysisHistory: Prisma.$AnalysisHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      fileName: string
      filePath: string
      fileType: string
      fileSize: number
      originalText: string
      uploadedAt: Date
      updatedAt: Date
      overallScore: number | null
      atsScore: number | null
      contactInfo: Prisma.JsonValue | null
      experience: Prisma.JsonValue | null
      education: Prisma.JsonValue | null
      skills: Prisma.JsonValue | null
      strengths: string[]
      weaknesses: string[]
      suggestions: string[]
      keySkills: string[]
      summary: string | null
      matchedKeywords: string[]
      missingKeywords: string[]
      keywordDensity: Prisma.JsonValue | null
    }, ExtArgs["result"]["resume"]>
    composites: {}
  }

  type ResumeGetPayload<S extends boolean | null | undefined | ResumeDefaultArgs> = $Result.GetResult<Prisma.$ResumePayload, S>

  type ResumeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ResumeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ResumeCountAggregateInputType | true
    }

  export interface ResumeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Resume'], meta: { name: 'Resume' } }
    /**
     * Find zero or one Resume that matches the filter.
     * @param {ResumeFindUniqueArgs} args - Arguments to find a Resume
     * @example
     * // Get one Resume
     * const resume = await prisma.resume.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResumeFindUniqueArgs>(args: SelectSubset<T, ResumeFindUniqueArgs<ExtArgs>>): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Resume that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ResumeFindUniqueOrThrowArgs} args - Arguments to find a Resume
     * @example
     * // Get one Resume
     * const resume = await prisma.resume.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResumeFindUniqueOrThrowArgs>(args: SelectSubset<T, ResumeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Resume that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeFindFirstArgs} args - Arguments to find a Resume
     * @example
     * // Get one Resume
     * const resume = await prisma.resume.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResumeFindFirstArgs>(args?: SelectSubset<T, ResumeFindFirstArgs<ExtArgs>>): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Resume that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeFindFirstOrThrowArgs} args - Arguments to find a Resume
     * @example
     * // Get one Resume
     * const resume = await prisma.resume.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResumeFindFirstOrThrowArgs>(args?: SelectSubset<T, ResumeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Resumes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Resumes
     * const resumes = await prisma.resume.findMany()
     * 
     * // Get first 10 Resumes
     * const resumes = await prisma.resume.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resumeWithIdOnly = await prisma.resume.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResumeFindManyArgs>(args?: SelectSubset<T, ResumeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Resume.
     * @param {ResumeCreateArgs} args - Arguments to create a Resume.
     * @example
     * // Create one Resume
     * const Resume = await prisma.resume.create({
     *   data: {
     *     // ... data to create a Resume
     *   }
     * })
     * 
     */
    create<T extends ResumeCreateArgs>(args: SelectSubset<T, ResumeCreateArgs<ExtArgs>>): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Resumes.
     * @param {ResumeCreateManyArgs} args - Arguments to create many Resumes.
     * @example
     * // Create many Resumes
     * const resume = await prisma.resume.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResumeCreateManyArgs>(args?: SelectSubset<T, ResumeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Resumes and returns the data saved in the database.
     * @param {ResumeCreateManyAndReturnArgs} args - Arguments to create many Resumes.
     * @example
     * // Create many Resumes
     * const resume = await prisma.resume.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Resumes and only return the `id`
     * const resumeWithIdOnly = await prisma.resume.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResumeCreateManyAndReturnArgs>(args?: SelectSubset<T, ResumeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Resume.
     * @param {ResumeDeleteArgs} args - Arguments to delete one Resume.
     * @example
     * // Delete one Resume
     * const Resume = await prisma.resume.delete({
     *   where: {
     *     // ... filter to delete one Resume
     *   }
     * })
     * 
     */
    delete<T extends ResumeDeleteArgs>(args: SelectSubset<T, ResumeDeleteArgs<ExtArgs>>): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Resume.
     * @param {ResumeUpdateArgs} args - Arguments to update one Resume.
     * @example
     * // Update one Resume
     * const resume = await prisma.resume.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResumeUpdateArgs>(args: SelectSubset<T, ResumeUpdateArgs<ExtArgs>>): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Resumes.
     * @param {ResumeDeleteManyArgs} args - Arguments to filter Resumes to delete.
     * @example
     * // Delete a few Resumes
     * const { count } = await prisma.resume.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResumeDeleteManyArgs>(args?: SelectSubset<T, ResumeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Resumes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Resumes
     * const resume = await prisma.resume.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResumeUpdateManyArgs>(args: SelectSubset<T, ResumeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Resume.
     * @param {ResumeUpsertArgs} args - Arguments to update or create a Resume.
     * @example
     * // Update or create a Resume
     * const resume = await prisma.resume.upsert({
     *   create: {
     *     // ... data to create a Resume
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Resume we want to update
     *   }
     * })
     */
    upsert<T extends ResumeUpsertArgs>(args: SelectSubset<T, ResumeUpsertArgs<ExtArgs>>): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Resumes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeCountArgs} args - Arguments to filter Resumes to count.
     * @example
     * // Count the number of Resumes
     * const count = await prisma.resume.count({
     *   where: {
     *     // ... the filter for the Resumes we want to count
     *   }
     * })
    **/
    count<T extends ResumeCountArgs>(
      args?: Subset<T, ResumeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResumeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Resume.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResumeAggregateArgs>(args: Subset<T, ResumeAggregateArgs>): Prisma.PrismaPromise<GetResumeAggregateType<T>>

    /**
     * Group by Resume.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResumeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResumeGroupByArgs['orderBy'] }
        : { orderBy?: ResumeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResumeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Resume model
   */
  readonly fields: ResumeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Resume.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResumeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jobDescriptions<T extends Resume$jobDescriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Resume$jobDescriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobDescriptionPayload<ExtArgs>, T, "findMany"> | Null>
    analysisHistory<T extends Resume$analysisHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Resume$analysisHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalysisHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Resume model
   */ 
  interface ResumeFieldRefs {
    readonly id: FieldRef<"Resume", 'Int'>
    readonly userId: FieldRef<"Resume", 'Int'>
    readonly fileName: FieldRef<"Resume", 'String'>
    readonly filePath: FieldRef<"Resume", 'String'>
    readonly fileType: FieldRef<"Resume", 'String'>
    readonly fileSize: FieldRef<"Resume", 'Int'>
    readonly originalText: FieldRef<"Resume", 'String'>
    readonly uploadedAt: FieldRef<"Resume", 'DateTime'>
    readonly updatedAt: FieldRef<"Resume", 'DateTime'>
    readonly overallScore: FieldRef<"Resume", 'Int'>
    readonly atsScore: FieldRef<"Resume", 'Int'>
    readonly contactInfo: FieldRef<"Resume", 'Json'>
    readonly experience: FieldRef<"Resume", 'Json'>
    readonly education: FieldRef<"Resume", 'Json'>
    readonly skills: FieldRef<"Resume", 'Json'>
    readonly strengths: FieldRef<"Resume", 'String[]'>
    readonly weaknesses: FieldRef<"Resume", 'String[]'>
    readonly suggestions: FieldRef<"Resume", 'String[]'>
    readonly keySkills: FieldRef<"Resume", 'String[]'>
    readonly summary: FieldRef<"Resume", 'String'>
    readonly matchedKeywords: FieldRef<"Resume", 'String[]'>
    readonly missingKeywords: FieldRef<"Resume", 'String[]'>
    readonly keywordDensity: FieldRef<"Resume", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Resume findUnique
   */
  export type ResumeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter, which Resume to fetch.
     */
    where: ResumeWhereUniqueInput
  }

  /**
   * Resume findUniqueOrThrow
   */
  export type ResumeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter, which Resume to fetch.
     */
    where: ResumeWhereUniqueInput
  }

  /**
   * Resume findFirst
   */
  export type ResumeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter, which Resume to fetch.
     */
    where?: ResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resumes to fetch.
     */
    orderBy?: ResumeOrderByWithRelationInput | ResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Resumes.
     */
    cursor?: ResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Resumes.
     */
    distinct?: ResumeScalarFieldEnum | ResumeScalarFieldEnum[]
  }

  /**
   * Resume findFirstOrThrow
   */
  export type ResumeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter, which Resume to fetch.
     */
    where?: ResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resumes to fetch.
     */
    orderBy?: ResumeOrderByWithRelationInput | ResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Resumes.
     */
    cursor?: ResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Resumes.
     */
    distinct?: ResumeScalarFieldEnum | ResumeScalarFieldEnum[]
  }

  /**
   * Resume findMany
   */
  export type ResumeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter, which Resumes to fetch.
     */
    where?: ResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resumes to fetch.
     */
    orderBy?: ResumeOrderByWithRelationInput | ResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Resumes.
     */
    cursor?: ResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resumes.
     */
    skip?: number
    distinct?: ResumeScalarFieldEnum | ResumeScalarFieldEnum[]
  }

  /**
   * Resume create
   */
  export type ResumeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * The data needed to create a Resume.
     */
    data: XOR<ResumeCreateInput, ResumeUncheckedCreateInput>
  }

  /**
   * Resume createMany
   */
  export type ResumeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Resumes.
     */
    data: ResumeCreateManyInput | ResumeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Resume createManyAndReturn
   */
  export type ResumeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Resumes.
     */
    data: ResumeCreateManyInput | ResumeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Resume update
   */
  export type ResumeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * The data needed to update a Resume.
     */
    data: XOR<ResumeUpdateInput, ResumeUncheckedUpdateInput>
    /**
     * Choose, which Resume to update.
     */
    where: ResumeWhereUniqueInput
  }

  /**
   * Resume updateMany
   */
  export type ResumeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Resumes.
     */
    data: XOR<ResumeUpdateManyMutationInput, ResumeUncheckedUpdateManyInput>
    /**
     * Filter which Resumes to update
     */
    where?: ResumeWhereInput
  }

  /**
   * Resume upsert
   */
  export type ResumeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * The filter to search for the Resume to update in case it exists.
     */
    where: ResumeWhereUniqueInput
    /**
     * In case the Resume found by the `where` argument doesn't exist, create a new Resume with this data.
     */
    create: XOR<ResumeCreateInput, ResumeUncheckedCreateInput>
    /**
     * In case the Resume was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResumeUpdateInput, ResumeUncheckedUpdateInput>
  }

  /**
   * Resume delete
   */
  export type ResumeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter which Resume to delete.
     */
    where: ResumeWhereUniqueInput
  }

  /**
   * Resume deleteMany
   */
  export type ResumeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Resumes to delete
     */
    where?: ResumeWhereInput
  }

  /**
   * Resume.jobDescriptions
   */
  export type Resume$jobDescriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobDescription
     */
    select?: JobDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobDescriptionInclude<ExtArgs> | null
    where?: JobDescriptionWhereInput
    orderBy?: JobDescriptionOrderByWithRelationInput | JobDescriptionOrderByWithRelationInput[]
    cursor?: JobDescriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobDescriptionScalarFieldEnum | JobDescriptionScalarFieldEnum[]
  }

  /**
   * Resume.analysisHistory
   */
  export type Resume$analysisHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalysisHistory
     */
    select?: AnalysisHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalysisHistoryInclude<ExtArgs> | null
    where?: AnalysisHistoryWhereInput
    orderBy?: AnalysisHistoryOrderByWithRelationInput | AnalysisHistoryOrderByWithRelationInput[]
    cursor?: AnalysisHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnalysisHistoryScalarFieldEnum | AnalysisHistoryScalarFieldEnum[]
  }

  /**
   * Resume without action
   */
  export type ResumeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeInclude<ExtArgs> | null
  }


  /**
   * Model JobDescription
   */

  export type AggregateJobDescription = {
    _count: JobDescriptionCountAggregateOutputType | null
    _avg: JobDescriptionAvgAggregateOutputType | null
    _sum: JobDescriptionSumAggregateOutputType | null
    _min: JobDescriptionMinAggregateOutputType | null
    _max: JobDescriptionMaxAggregateOutputType | null
  }

  export type JobDescriptionAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type JobDescriptionSumAggregateOutputType = {
    id: number | null
    resumeId: number | null
  }

  export type JobDescriptionMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    jobTitle: string | null
    company: string | null
    description: string | null
    createdAt: Date | null
  }

  export type JobDescriptionMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    jobTitle: string | null
    company: string | null
    description: string | null
    createdAt: Date | null
  }

  export type JobDescriptionCountAggregateOutputType = {
    id: number
    resumeId: number
    jobTitle: number
    company: number
    description: number
    requiredKeywords: number
    createdAt: number
    _all: number
  }


  export type JobDescriptionAvgAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type JobDescriptionSumAggregateInputType = {
    id?: true
    resumeId?: true
  }

  export type JobDescriptionMinAggregateInputType = {
    id?: true
    resumeId?: true
    jobTitle?: true
    company?: true
    description?: true
    createdAt?: true
  }

  export type JobDescriptionMaxAggregateInputType = {
    id?: true
    resumeId?: true
    jobTitle?: true
    company?: true
    description?: true
    createdAt?: true
  }

  export type JobDescriptionCountAggregateInputType = {
    id?: true
    resumeId?: true
    jobTitle?: true
    company?: true
    description?: true
    requiredKeywords?: true
    createdAt?: true
    _all?: true
  }

  export type JobDescriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobDescription to aggregate.
     */
    where?: JobDescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobDescriptions to fetch.
     */
    orderBy?: JobDescriptionOrderByWithRelationInput | JobDescriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobDescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobDescriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobDescriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobDescriptions
    **/
    _count?: true | JobDescriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobDescriptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobDescriptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobDescriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobDescriptionMaxAggregateInputType
  }

  export type GetJobDescriptionAggregateType<T extends JobDescriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateJobDescription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobDescription[P]>
      : GetScalarType<T[P], AggregateJobDescription[P]>
  }




  export type JobDescriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobDescriptionWhereInput
    orderBy?: JobDescriptionOrderByWithAggregationInput | JobDescriptionOrderByWithAggregationInput[]
    by: JobDescriptionScalarFieldEnum[] | JobDescriptionScalarFieldEnum
    having?: JobDescriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobDescriptionCountAggregateInputType | true
    _avg?: JobDescriptionAvgAggregateInputType
    _sum?: JobDescriptionSumAggregateInputType
    _min?: JobDescriptionMinAggregateInputType
    _max?: JobDescriptionMaxAggregateInputType
  }

  export type JobDescriptionGroupByOutputType = {
    id: number
    resumeId: number
    jobTitle: string | null
    company: string | null
    description: string
    requiredKeywords: string[]
    createdAt: Date
    _count: JobDescriptionCountAggregateOutputType | null
    _avg: JobDescriptionAvgAggregateOutputType | null
    _sum: JobDescriptionSumAggregateOutputType | null
    _min: JobDescriptionMinAggregateOutputType | null
    _max: JobDescriptionMaxAggregateOutputType | null
  }

  type GetJobDescriptionGroupByPayload<T extends JobDescriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobDescriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobDescriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobDescriptionGroupByOutputType[P]>
            : GetScalarType<T[P], JobDescriptionGroupByOutputType[P]>
        }
      >
    >


  export type JobDescriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    jobTitle?: boolean
    company?: boolean
    description?: boolean
    requiredKeywords?: boolean
    createdAt?: boolean
    resume?: boolean | ResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobDescription"]>

  export type JobDescriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    jobTitle?: boolean
    company?: boolean
    description?: boolean
    requiredKeywords?: boolean
    createdAt?: boolean
    resume?: boolean | ResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobDescription"]>

  export type JobDescriptionSelectScalar = {
    id?: boolean
    resumeId?: boolean
    jobTitle?: boolean
    company?: boolean
    description?: boolean
    requiredKeywords?: boolean
    createdAt?: boolean
  }

  export type JobDescriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | ResumeDefaultArgs<ExtArgs>
  }
  export type JobDescriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | ResumeDefaultArgs<ExtArgs>
  }

  export type $JobDescriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobDescription"
    objects: {
      resume: Prisma.$ResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      jobTitle: string | null
      company: string | null
      description: string
      requiredKeywords: string[]
      createdAt: Date
    }, ExtArgs["result"]["jobDescription"]>
    composites: {}
  }

  type JobDescriptionGetPayload<S extends boolean | null | undefined | JobDescriptionDefaultArgs> = $Result.GetResult<Prisma.$JobDescriptionPayload, S>

  type JobDescriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JobDescriptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JobDescriptionCountAggregateInputType | true
    }

  export interface JobDescriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobDescription'], meta: { name: 'JobDescription' } }
    /**
     * Find zero or one JobDescription that matches the filter.
     * @param {JobDescriptionFindUniqueArgs} args - Arguments to find a JobDescription
     * @example
     * // Get one JobDescription
     * const jobDescription = await prisma.jobDescription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobDescriptionFindUniqueArgs>(args: SelectSubset<T, JobDescriptionFindUniqueArgs<ExtArgs>>): Prisma__JobDescriptionClient<$Result.GetResult<Prisma.$JobDescriptionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one JobDescription that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JobDescriptionFindUniqueOrThrowArgs} args - Arguments to find a JobDescription
     * @example
     * // Get one JobDescription
     * const jobDescription = await prisma.jobDescription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobDescriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, JobDescriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobDescriptionClient<$Result.GetResult<Prisma.$JobDescriptionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first JobDescription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobDescriptionFindFirstArgs} args - Arguments to find a JobDescription
     * @example
     * // Get one JobDescription
     * const jobDescription = await prisma.jobDescription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobDescriptionFindFirstArgs>(args?: SelectSubset<T, JobDescriptionFindFirstArgs<ExtArgs>>): Prisma__JobDescriptionClient<$Result.GetResult<Prisma.$JobDescriptionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first JobDescription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobDescriptionFindFirstOrThrowArgs} args - Arguments to find a JobDescription
     * @example
     * // Get one JobDescription
     * const jobDescription = await prisma.jobDescription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobDescriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, JobDescriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobDescriptionClient<$Result.GetResult<Prisma.$JobDescriptionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more JobDescriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobDescriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobDescriptions
     * const jobDescriptions = await prisma.jobDescription.findMany()
     * 
     * // Get first 10 JobDescriptions
     * const jobDescriptions = await prisma.jobDescription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobDescriptionWithIdOnly = await prisma.jobDescription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobDescriptionFindManyArgs>(args?: SelectSubset<T, JobDescriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobDescriptionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a JobDescription.
     * @param {JobDescriptionCreateArgs} args - Arguments to create a JobDescription.
     * @example
     * // Create one JobDescription
     * const JobDescription = await prisma.jobDescription.create({
     *   data: {
     *     // ... data to create a JobDescription
     *   }
     * })
     * 
     */
    create<T extends JobDescriptionCreateArgs>(args: SelectSubset<T, JobDescriptionCreateArgs<ExtArgs>>): Prisma__JobDescriptionClient<$Result.GetResult<Prisma.$JobDescriptionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many JobDescriptions.
     * @param {JobDescriptionCreateManyArgs} args - Arguments to create many JobDescriptions.
     * @example
     * // Create many JobDescriptions
     * const jobDescription = await prisma.jobDescription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobDescriptionCreateManyArgs>(args?: SelectSubset<T, JobDescriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobDescriptions and returns the data saved in the database.
     * @param {JobDescriptionCreateManyAndReturnArgs} args - Arguments to create many JobDescriptions.
     * @example
     * // Create many JobDescriptions
     * const jobDescription = await prisma.jobDescription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobDescriptions and only return the `id`
     * const jobDescriptionWithIdOnly = await prisma.jobDescription.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobDescriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, JobDescriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobDescriptionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a JobDescription.
     * @param {JobDescriptionDeleteArgs} args - Arguments to delete one JobDescription.
     * @example
     * // Delete one JobDescription
     * const JobDescription = await prisma.jobDescription.delete({
     *   where: {
     *     // ... filter to delete one JobDescription
     *   }
     * })
     * 
     */
    delete<T extends JobDescriptionDeleteArgs>(args: SelectSubset<T, JobDescriptionDeleteArgs<ExtArgs>>): Prisma__JobDescriptionClient<$Result.GetResult<Prisma.$JobDescriptionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one JobDescription.
     * @param {JobDescriptionUpdateArgs} args - Arguments to update one JobDescription.
     * @example
     * // Update one JobDescription
     * const jobDescription = await prisma.jobDescription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobDescriptionUpdateArgs>(args: SelectSubset<T, JobDescriptionUpdateArgs<ExtArgs>>): Prisma__JobDescriptionClient<$Result.GetResult<Prisma.$JobDescriptionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more JobDescriptions.
     * @param {JobDescriptionDeleteManyArgs} args - Arguments to filter JobDescriptions to delete.
     * @example
     * // Delete a few JobDescriptions
     * const { count } = await prisma.jobDescription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobDescriptionDeleteManyArgs>(args?: SelectSubset<T, JobDescriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobDescriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobDescriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobDescriptions
     * const jobDescription = await prisma.jobDescription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobDescriptionUpdateManyArgs>(args: SelectSubset<T, JobDescriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JobDescription.
     * @param {JobDescriptionUpsertArgs} args - Arguments to update or create a JobDescription.
     * @example
     * // Update or create a JobDescription
     * const jobDescription = await prisma.jobDescription.upsert({
     *   create: {
     *     // ... data to create a JobDescription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobDescription we want to update
     *   }
     * })
     */
    upsert<T extends JobDescriptionUpsertArgs>(args: SelectSubset<T, JobDescriptionUpsertArgs<ExtArgs>>): Prisma__JobDescriptionClient<$Result.GetResult<Prisma.$JobDescriptionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of JobDescriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobDescriptionCountArgs} args - Arguments to filter JobDescriptions to count.
     * @example
     * // Count the number of JobDescriptions
     * const count = await prisma.jobDescription.count({
     *   where: {
     *     // ... the filter for the JobDescriptions we want to count
     *   }
     * })
    **/
    count<T extends JobDescriptionCountArgs>(
      args?: Subset<T, JobDescriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobDescriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobDescription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobDescriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobDescriptionAggregateArgs>(args: Subset<T, JobDescriptionAggregateArgs>): Prisma.PrismaPromise<GetJobDescriptionAggregateType<T>>

    /**
     * Group by JobDescription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobDescriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobDescriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobDescriptionGroupByArgs['orderBy'] }
        : { orderBy?: JobDescriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobDescriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobDescriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobDescription model
   */
  readonly fields: JobDescriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobDescription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobDescriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends ResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResumeDefaultArgs<ExtArgs>>): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobDescription model
   */ 
  interface JobDescriptionFieldRefs {
    readonly id: FieldRef<"JobDescription", 'Int'>
    readonly resumeId: FieldRef<"JobDescription", 'Int'>
    readonly jobTitle: FieldRef<"JobDescription", 'String'>
    readonly company: FieldRef<"JobDescription", 'String'>
    readonly description: FieldRef<"JobDescription", 'String'>
    readonly requiredKeywords: FieldRef<"JobDescription", 'String[]'>
    readonly createdAt: FieldRef<"JobDescription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JobDescription findUnique
   */
  export type JobDescriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobDescription
     */
    select?: JobDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobDescriptionInclude<ExtArgs> | null
    /**
     * Filter, which JobDescription to fetch.
     */
    where: JobDescriptionWhereUniqueInput
  }

  /**
   * JobDescription findUniqueOrThrow
   */
  export type JobDescriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobDescription
     */
    select?: JobDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobDescriptionInclude<ExtArgs> | null
    /**
     * Filter, which JobDescription to fetch.
     */
    where: JobDescriptionWhereUniqueInput
  }

  /**
   * JobDescription findFirst
   */
  export type JobDescriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobDescription
     */
    select?: JobDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobDescriptionInclude<ExtArgs> | null
    /**
     * Filter, which JobDescription to fetch.
     */
    where?: JobDescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobDescriptions to fetch.
     */
    orderBy?: JobDescriptionOrderByWithRelationInput | JobDescriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobDescriptions.
     */
    cursor?: JobDescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobDescriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobDescriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobDescriptions.
     */
    distinct?: JobDescriptionScalarFieldEnum | JobDescriptionScalarFieldEnum[]
  }

  /**
   * JobDescription findFirstOrThrow
   */
  export type JobDescriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobDescription
     */
    select?: JobDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobDescriptionInclude<ExtArgs> | null
    /**
     * Filter, which JobDescription to fetch.
     */
    where?: JobDescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobDescriptions to fetch.
     */
    orderBy?: JobDescriptionOrderByWithRelationInput | JobDescriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobDescriptions.
     */
    cursor?: JobDescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobDescriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobDescriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobDescriptions.
     */
    distinct?: JobDescriptionScalarFieldEnum | JobDescriptionScalarFieldEnum[]
  }

  /**
   * JobDescription findMany
   */
  export type JobDescriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobDescription
     */
    select?: JobDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobDescriptionInclude<ExtArgs> | null
    /**
     * Filter, which JobDescriptions to fetch.
     */
    where?: JobDescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobDescriptions to fetch.
     */
    orderBy?: JobDescriptionOrderByWithRelationInput | JobDescriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobDescriptions.
     */
    cursor?: JobDescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobDescriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobDescriptions.
     */
    skip?: number
    distinct?: JobDescriptionScalarFieldEnum | JobDescriptionScalarFieldEnum[]
  }

  /**
   * JobDescription create
   */
  export type JobDescriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobDescription
     */
    select?: JobDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobDescriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a JobDescription.
     */
    data: XOR<JobDescriptionCreateInput, JobDescriptionUncheckedCreateInput>
  }

  /**
   * JobDescription createMany
   */
  export type JobDescriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobDescriptions.
     */
    data: JobDescriptionCreateManyInput | JobDescriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobDescription createManyAndReturn
   */
  export type JobDescriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobDescription
     */
    select?: JobDescriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many JobDescriptions.
     */
    data: JobDescriptionCreateManyInput | JobDescriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobDescriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobDescription update
   */
  export type JobDescriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobDescription
     */
    select?: JobDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobDescriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a JobDescription.
     */
    data: XOR<JobDescriptionUpdateInput, JobDescriptionUncheckedUpdateInput>
    /**
     * Choose, which JobDescription to update.
     */
    where: JobDescriptionWhereUniqueInput
  }

  /**
   * JobDescription updateMany
   */
  export type JobDescriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobDescriptions.
     */
    data: XOR<JobDescriptionUpdateManyMutationInput, JobDescriptionUncheckedUpdateManyInput>
    /**
     * Filter which JobDescriptions to update
     */
    where?: JobDescriptionWhereInput
  }

  /**
   * JobDescription upsert
   */
  export type JobDescriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobDescription
     */
    select?: JobDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobDescriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the JobDescription to update in case it exists.
     */
    where: JobDescriptionWhereUniqueInput
    /**
     * In case the JobDescription found by the `where` argument doesn't exist, create a new JobDescription with this data.
     */
    create: XOR<JobDescriptionCreateInput, JobDescriptionUncheckedCreateInput>
    /**
     * In case the JobDescription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobDescriptionUpdateInput, JobDescriptionUncheckedUpdateInput>
  }

  /**
   * JobDescription delete
   */
  export type JobDescriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobDescription
     */
    select?: JobDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobDescriptionInclude<ExtArgs> | null
    /**
     * Filter which JobDescription to delete.
     */
    where: JobDescriptionWhereUniqueInput
  }

  /**
   * JobDescription deleteMany
   */
  export type JobDescriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobDescriptions to delete
     */
    where?: JobDescriptionWhereInput
  }

  /**
   * JobDescription without action
   */
  export type JobDescriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobDescription
     */
    select?: JobDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobDescriptionInclude<ExtArgs> | null
  }


  /**
   * Model AnalysisHistory
   */

  export type AggregateAnalysisHistory = {
    _count: AnalysisHistoryCountAggregateOutputType | null
    _avg: AnalysisHistoryAvgAggregateOutputType | null
    _sum: AnalysisHistorySumAggregateOutputType | null
    _min: AnalysisHistoryMinAggregateOutputType | null
    _max: AnalysisHistoryMaxAggregateOutputType | null
  }

  export type AnalysisHistoryAvgAggregateOutputType = {
    id: number | null
    resumeId: number | null
    score: number | null
  }

  export type AnalysisHistorySumAggregateOutputType = {
    id: number | null
    resumeId: number | null
    score: number | null
  }

  export type AnalysisHistoryMinAggregateOutputType = {
    id: number | null
    resumeId: number | null
    score: number | null
    analyzedAt: Date | null
  }

  export type AnalysisHistoryMaxAggregateOutputType = {
    id: number | null
    resumeId: number | null
    score: number | null
    analyzedAt: Date | null
  }

  export type AnalysisHistoryCountAggregateOutputType = {
    id: number
    resumeId: number
    score: number
    analyzedAt: number
    _all: number
  }


  export type AnalysisHistoryAvgAggregateInputType = {
    id?: true
    resumeId?: true
    score?: true
  }

  export type AnalysisHistorySumAggregateInputType = {
    id?: true
    resumeId?: true
    score?: true
  }

  export type AnalysisHistoryMinAggregateInputType = {
    id?: true
    resumeId?: true
    score?: true
    analyzedAt?: true
  }

  export type AnalysisHistoryMaxAggregateInputType = {
    id?: true
    resumeId?: true
    score?: true
    analyzedAt?: true
  }

  export type AnalysisHistoryCountAggregateInputType = {
    id?: true
    resumeId?: true
    score?: true
    analyzedAt?: true
    _all?: true
  }

  export type AnalysisHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnalysisHistory to aggregate.
     */
    where?: AnalysisHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalysisHistories to fetch.
     */
    orderBy?: AnalysisHistoryOrderByWithRelationInput | AnalysisHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnalysisHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalysisHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalysisHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnalysisHistories
    **/
    _count?: true | AnalysisHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnalysisHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnalysisHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnalysisHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnalysisHistoryMaxAggregateInputType
  }

  export type GetAnalysisHistoryAggregateType<T extends AnalysisHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateAnalysisHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnalysisHistory[P]>
      : GetScalarType<T[P], AggregateAnalysisHistory[P]>
  }




  export type AnalysisHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnalysisHistoryWhereInput
    orderBy?: AnalysisHistoryOrderByWithAggregationInput | AnalysisHistoryOrderByWithAggregationInput[]
    by: AnalysisHistoryScalarFieldEnum[] | AnalysisHistoryScalarFieldEnum
    having?: AnalysisHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnalysisHistoryCountAggregateInputType | true
    _avg?: AnalysisHistoryAvgAggregateInputType
    _sum?: AnalysisHistorySumAggregateInputType
    _min?: AnalysisHistoryMinAggregateInputType
    _max?: AnalysisHistoryMaxAggregateInputType
  }

  export type AnalysisHistoryGroupByOutputType = {
    id: number
    resumeId: number
    score: number
    analyzedAt: Date
    _count: AnalysisHistoryCountAggregateOutputType | null
    _avg: AnalysisHistoryAvgAggregateOutputType | null
    _sum: AnalysisHistorySumAggregateOutputType | null
    _min: AnalysisHistoryMinAggregateOutputType | null
    _max: AnalysisHistoryMaxAggregateOutputType | null
  }

  type GetAnalysisHistoryGroupByPayload<T extends AnalysisHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnalysisHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnalysisHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnalysisHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], AnalysisHistoryGroupByOutputType[P]>
        }
      >
    >


  export type AnalysisHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    score?: boolean
    analyzedAt?: boolean
    resume?: boolean | ResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["analysisHistory"]>

  export type AnalysisHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    score?: boolean
    analyzedAt?: boolean
    resume?: boolean | ResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["analysisHistory"]>

  export type AnalysisHistorySelectScalar = {
    id?: boolean
    resumeId?: boolean
    score?: boolean
    analyzedAt?: boolean
  }

  export type AnalysisHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | ResumeDefaultArgs<ExtArgs>
  }
  export type AnalysisHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | ResumeDefaultArgs<ExtArgs>
  }

  export type $AnalysisHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnalysisHistory"
    objects: {
      resume: Prisma.$ResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resumeId: number
      score: number
      analyzedAt: Date
    }, ExtArgs["result"]["analysisHistory"]>
    composites: {}
  }

  type AnalysisHistoryGetPayload<S extends boolean | null | undefined | AnalysisHistoryDefaultArgs> = $Result.GetResult<Prisma.$AnalysisHistoryPayload, S>

  type AnalysisHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AnalysisHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AnalysisHistoryCountAggregateInputType | true
    }

  export interface AnalysisHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnalysisHistory'], meta: { name: 'AnalysisHistory' } }
    /**
     * Find zero or one AnalysisHistory that matches the filter.
     * @param {AnalysisHistoryFindUniqueArgs} args - Arguments to find a AnalysisHistory
     * @example
     * // Get one AnalysisHistory
     * const analysisHistory = await prisma.analysisHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnalysisHistoryFindUniqueArgs>(args: SelectSubset<T, AnalysisHistoryFindUniqueArgs<ExtArgs>>): Prisma__AnalysisHistoryClient<$Result.GetResult<Prisma.$AnalysisHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AnalysisHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AnalysisHistoryFindUniqueOrThrowArgs} args - Arguments to find a AnalysisHistory
     * @example
     * // Get one AnalysisHistory
     * const analysisHistory = await prisma.analysisHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnalysisHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, AnalysisHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnalysisHistoryClient<$Result.GetResult<Prisma.$AnalysisHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AnalysisHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalysisHistoryFindFirstArgs} args - Arguments to find a AnalysisHistory
     * @example
     * // Get one AnalysisHistory
     * const analysisHistory = await prisma.analysisHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnalysisHistoryFindFirstArgs>(args?: SelectSubset<T, AnalysisHistoryFindFirstArgs<ExtArgs>>): Prisma__AnalysisHistoryClient<$Result.GetResult<Prisma.$AnalysisHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AnalysisHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalysisHistoryFindFirstOrThrowArgs} args - Arguments to find a AnalysisHistory
     * @example
     * // Get one AnalysisHistory
     * const analysisHistory = await prisma.analysisHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnalysisHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, AnalysisHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnalysisHistoryClient<$Result.GetResult<Prisma.$AnalysisHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AnalysisHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalysisHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnalysisHistories
     * const analysisHistories = await prisma.analysisHistory.findMany()
     * 
     * // Get first 10 AnalysisHistories
     * const analysisHistories = await prisma.analysisHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const analysisHistoryWithIdOnly = await prisma.analysisHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnalysisHistoryFindManyArgs>(args?: SelectSubset<T, AnalysisHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalysisHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AnalysisHistory.
     * @param {AnalysisHistoryCreateArgs} args - Arguments to create a AnalysisHistory.
     * @example
     * // Create one AnalysisHistory
     * const AnalysisHistory = await prisma.analysisHistory.create({
     *   data: {
     *     // ... data to create a AnalysisHistory
     *   }
     * })
     * 
     */
    create<T extends AnalysisHistoryCreateArgs>(args: SelectSubset<T, AnalysisHistoryCreateArgs<ExtArgs>>): Prisma__AnalysisHistoryClient<$Result.GetResult<Prisma.$AnalysisHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AnalysisHistories.
     * @param {AnalysisHistoryCreateManyArgs} args - Arguments to create many AnalysisHistories.
     * @example
     * // Create many AnalysisHistories
     * const analysisHistory = await prisma.analysisHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnalysisHistoryCreateManyArgs>(args?: SelectSubset<T, AnalysisHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AnalysisHistories and returns the data saved in the database.
     * @param {AnalysisHistoryCreateManyAndReturnArgs} args - Arguments to create many AnalysisHistories.
     * @example
     * // Create many AnalysisHistories
     * const analysisHistory = await prisma.analysisHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AnalysisHistories and only return the `id`
     * const analysisHistoryWithIdOnly = await prisma.analysisHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnalysisHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, AnalysisHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalysisHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AnalysisHistory.
     * @param {AnalysisHistoryDeleteArgs} args - Arguments to delete one AnalysisHistory.
     * @example
     * // Delete one AnalysisHistory
     * const AnalysisHistory = await prisma.analysisHistory.delete({
     *   where: {
     *     // ... filter to delete one AnalysisHistory
     *   }
     * })
     * 
     */
    delete<T extends AnalysisHistoryDeleteArgs>(args: SelectSubset<T, AnalysisHistoryDeleteArgs<ExtArgs>>): Prisma__AnalysisHistoryClient<$Result.GetResult<Prisma.$AnalysisHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AnalysisHistory.
     * @param {AnalysisHistoryUpdateArgs} args - Arguments to update one AnalysisHistory.
     * @example
     * // Update one AnalysisHistory
     * const analysisHistory = await prisma.analysisHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnalysisHistoryUpdateArgs>(args: SelectSubset<T, AnalysisHistoryUpdateArgs<ExtArgs>>): Prisma__AnalysisHistoryClient<$Result.GetResult<Prisma.$AnalysisHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AnalysisHistories.
     * @param {AnalysisHistoryDeleteManyArgs} args - Arguments to filter AnalysisHistories to delete.
     * @example
     * // Delete a few AnalysisHistories
     * const { count } = await prisma.analysisHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnalysisHistoryDeleteManyArgs>(args?: SelectSubset<T, AnalysisHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnalysisHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalysisHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnalysisHistories
     * const analysisHistory = await prisma.analysisHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnalysisHistoryUpdateManyArgs>(args: SelectSubset<T, AnalysisHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AnalysisHistory.
     * @param {AnalysisHistoryUpsertArgs} args - Arguments to update or create a AnalysisHistory.
     * @example
     * // Update or create a AnalysisHistory
     * const analysisHistory = await prisma.analysisHistory.upsert({
     *   create: {
     *     // ... data to create a AnalysisHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnalysisHistory we want to update
     *   }
     * })
     */
    upsert<T extends AnalysisHistoryUpsertArgs>(args: SelectSubset<T, AnalysisHistoryUpsertArgs<ExtArgs>>): Prisma__AnalysisHistoryClient<$Result.GetResult<Prisma.$AnalysisHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AnalysisHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalysisHistoryCountArgs} args - Arguments to filter AnalysisHistories to count.
     * @example
     * // Count the number of AnalysisHistories
     * const count = await prisma.analysisHistory.count({
     *   where: {
     *     // ... the filter for the AnalysisHistories we want to count
     *   }
     * })
    **/
    count<T extends AnalysisHistoryCountArgs>(
      args?: Subset<T, AnalysisHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnalysisHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnalysisHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalysisHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnalysisHistoryAggregateArgs>(args: Subset<T, AnalysisHistoryAggregateArgs>): Prisma.PrismaPromise<GetAnalysisHistoryAggregateType<T>>

    /**
     * Group by AnalysisHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalysisHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnalysisHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnalysisHistoryGroupByArgs['orderBy'] }
        : { orderBy?: AnalysisHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnalysisHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnalysisHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnalysisHistory model
   */
  readonly fields: AnalysisHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnalysisHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnalysisHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends ResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResumeDefaultArgs<ExtArgs>>): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnalysisHistory model
   */ 
  interface AnalysisHistoryFieldRefs {
    readonly id: FieldRef<"AnalysisHistory", 'Int'>
    readonly resumeId: FieldRef<"AnalysisHistory", 'Int'>
    readonly score: FieldRef<"AnalysisHistory", 'Int'>
    readonly analyzedAt: FieldRef<"AnalysisHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AnalysisHistory findUnique
   */
  export type AnalysisHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalysisHistory
     */
    select?: AnalysisHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalysisHistoryInclude<ExtArgs> | null
    /**
     * Filter, which AnalysisHistory to fetch.
     */
    where: AnalysisHistoryWhereUniqueInput
  }

  /**
   * AnalysisHistory findUniqueOrThrow
   */
  export type AnalysisHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalysisHistory
     */
    select?: AnalysisHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalysisHistoryInclude<ExtArgs> | null
    /**
     * Filter, which AnalysisHistory to fetch.
     */
    where: AnalysisHistoryWhereUniqueInput
  }

  /**
   * AnalysisHistory findFirst
   */
  export type AnalysisHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalysisHistory
     */
    select?: AnalysisHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalysisHistoryInclude<ExtArgs> | null
    /**
     * Filter, which AnalysisHistory to fetch.
     */
    where?: AnalysisHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalysisHistories to fetch.
     */
    orderBy?: AnalysisHistoryOrderByWithRelationInput | AnalysisHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnalysisHistories.
     */
    cursor?: AnalysisHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalysisHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalysisHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnalysisHistories.
     */
    distinct?: AnalysisHistoryScalarFieldEnum | AnalysisHistoryScalarFieldEnum[]
  }

  /**
   * AnalysisHistory findFirstOrThrow
   */
  export type AnalysisHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalysisHistory
     */
    select?: AnalysisHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalysisHistoryInclude<ExtArgs> | null
    /**
     * Filter, which AnalysisHistory to fetch.
     */
    where?: AnalysisHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalysisHistories to fetch.
     */
    orderBy?: AnalysisHistoryOrderByWithRelationInput | AnalysisHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnalysisHistories.
     */
    cursor?: AnalysisHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalysisHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalysisHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnalysisHistories.
     */
    distinct?: AnalysisHistoryScalarFieldEnum | AnalysisHistoryScalarFieldEnum[]
  }

  /**
   * AnalysisHistory findMany
   */
  export type AnalysisHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalysisHistory
     */
    select?: AnalysisHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalysisHistoryInclude<ExtArgs> | null
    /**
     * Filter, which AnalysisHistories to fetch.
     */
    where?: AnalysisHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalysisHistories to fetch.
     */
    orderBy?: AnalysisHistoryOrderByWithRelationInput | AnalysisHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnalysisHistories.
     */
    cursor?: AnalysisHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalysisHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalysisHistories.
     */
    skip?: number
    distinct?: AnalysisHistoryScalarFieldEnum | AnalysisHistoryScalarFieldEnum[]
  }

  /**
   * AnalysisHistory create
   */
  export type AnalysisHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalysisHistory
     */
    select?: AnalysisHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalysisHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a AnalysisHistory.
     */
    data: XOR<AnalysisHistoryCreateInput, AnalysisHistoryUncheckedCreateInput>
  }

  /**
   * AnalysisHistory createMany
   */
  export type AnalysisHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnalysisHistories.
     */
    data: AnalysisHistoryCreateManyInput | AnalysisHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnalysisHistory createManyAndReturn
   */
  export type AnalysisHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalysisHistory
     */
    select?: AnalysisHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AnalysisHistories.
     */
    data: AnalysisHistoryCreateManyInput | AnalysisHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalysisHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnalysisHistory update
   */
  export type AnalysisHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalysisHistory
     */
    select?: AnalysisHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalysisHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a AnalysisHistory.
     */
    data: XOR<AnalysisHistoryUpdateInput, AnalysisHistoryUncheckedUpdateInput>
    /**
     * Choose, which AnalysisHistory to update.
     */
    where: AnalysisHistoryWhereUniqueInput
  }

  /**
   * AnalysisHistory updateMany
   */
  export type AnalysisHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnalysisHistories.
     */
    data: XOR<AnalysisHistoryUpdateManyMutationInput, AnalysisHistoryUncheckedUpdateManyInput>
    /**
     * Filter which AnalysisHistories to update
     */
    where?: AnalysisHistoryWhereInput
  }

  /**
   * AnalysisHistory upsert
   */
  export type AnalysisHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalysisHistory
     */
    select?: AnalysisHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalysisHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the AnalysisHistory to update in case it exists.
     */
    where: AnalysisHistoryWhereUniqueInput
    /**
     * In case the AnalysisHistory found by the `where` argument doesn't exist, create a new AnalysisHistory with this data.
     */
    create: XOR<AnalysisHistoryCreateInput, AnalysisHistoryUncheckedCreateInput>
    /**
     * In case the AnalysisHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnalysisHistoryUpdateInput, AnalysisHistoryUncheckedUpdateInput>
  }

  /**
   * AnalysisHistory delete
   */
  export type AnalysisHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalysisHistory
     */
    select?: AnalysisHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalysisHistoryInclude<ExtArgs> | null
    /**
     * Filter which AnalysisHistory to delete.
     */
    where: AnalysisHistoryWhereUniqueInput
  }

  /**
   * AnalysisHistory deleteMany
   */
  export type AnalysisHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnalysisHistories to delete
     */
    where?: AnalysisHistoryWhereInput
  }

  /**
   * AnalysisHistory without action
   */
  export type AnalysisHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalysisHistory
     */
    select?: AnalysisHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalysisHistoryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    hashedPassword: 'hashedPassword',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ResumeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    fileName: 'fileName',
    filePath: 'filePath',
    fileType: 'fileType',
    fileSize: 'fileSize',
    originalText: 'originalText',
    uploadedAt: 'uploadedAt',
    updatedAt: 'updatedAt',
    overallScore: 'overallScore',
    atsScore: 'atsScore',
    contactInfo: 'contactInfo',
    experience: 'experience',
    education: 'education',
    skills: 'skills',
    strengths: 'strengths',
    weaknesses: 'weaknesses',
    suggestions: 'suggestions',
    keySkills: 'keySkills',
    summary: 'summary',
    matchedKeywords: 'matchedKeywords',
    missingKeywords: 'missingKeywords',
    keywordDensity: 'keywordDensity'
  };

  export type ResumeScalarFieldEnum = (typeof ResumeScalarFieldEnum)[keyof typeof ResumeScalarFieldEnum]


  export const JobDescriptionScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    jobTitle: 'jobTitle',
    company: 'company',
    description: 'description',
    requiredKeywords: 'requiredKeywords',
    createdAt: 'createdAt'
  };

  export type JobDescriptionScalarFieldEnum = (typeof JobDescriptionScalarFieldEnum)[keyof typeof JobDescriptionScalarFieldEnum]


  export const AnalysisHistoryScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    score: 'score',
    analyzedAt: 'analyzedAt'
  };

  export type AnalysisHistoryScalarFieldEnum = (typeof AnalysisHistoryScalarFieldEnum)[keyof typeof AnalysisHistoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    hashedPassword?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    resumes?: ResumeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    hashedPassword?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resumes?: ResumeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    hashedPassword?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    resumes?: ResumeListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    hashedPassword?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    hashedPassword?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ResumeWhereInput = {
    AND?: ResumeWhereInput | ResumeWhereInput[]
    OR?: ResumeWhereInput[]
    NOT?: ResumeWhereInput | ResumeWhereInput[]
    id?: IntFilter<"Resume"> | number
    userId?: IntFilter<"Resume"> | number
    fileName?: StringFilter<"Resume"> | string
    filePath?: StringFilter<"Resume"> | string
    fileType?: StringFilter<"Resume"> | string
    fileSize?: IntFilter<"Resume"> | number
    originalText?: StringFilter<"Resume"> | string
    uploadedAt?: DateTimeFilter<"Resume"> | Date | string
    updatedAt?: DateTimeFilter<"Resume"> | Date | string
    overallScore?: IntNullableFilter<"Resume"> | number | null
    atsScore?: IntNullableFilter<"Resume"> | number | null
    contactInfo?: JsonNullableFilter<"Resume">
    experience?: JsonNullableFilter<"Resume">
    education?: JsonNullableFilter<"Resume">
    skills?: JsonNullableFilter<"Resume">
    strengths?: StringNullableListFilter<"Resume">
    weaknesses?: StringNullableListFilter<"Resume">
    suggestions?: StringNullableListFilter<"Resume">
    keySkills?: StringNullableListFilter<"Resume">
    summary?: StringNullableFilter<"Resume"> | string | null
    matchedKeywords?: StringNullableListFilter<"Resume">
    missingKeywords?: StringNullableListFilter<"Resume">
    keywordDensity?: JsonNullableFilter<"Resume">
    user?: XOR<UserRelationFilter, UserWhereInput>
    jobDescriptions?: JobDescriptionListRelationFilter
    analysisHistory?: AnalysisHistoryListRelationFilter
  }

  export type ResumeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileType?: SortOrder
    fileSize?: SortOrder
    originalText?: SortOrder
    uploadedAt?: SortOrder
    updatedAt?: SortOrder
    overallScore?: SortOrderInput | SortOrder
    atsScore?: SortOrderInput | SortOrder
    contactInfo?: SortOrderInput | SortOrder
    experience?: SortOrderInput | SortOrder
    education?: SortOrderInput | SortOrder
    skills?: SortOrderInput | SortOrder
    strengths?: SortOrder
    weaknesses?: SortOrder
    suggestions?: SortOrder
    keySkills?: SortOrder
    summary?: SortOrderInput | SortOrder
    matchedKeywords?: SortOrder
    missingKeywords?: SortOrder
    keywordDensity?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    jobDescriptions?: JobDescriptionOrderByRelationAggregateInput
    analysisHistory?: AnalysisHistoryOrderByRelationAggregateInput
  }

  export type ResumeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ResumeWhereInput | ResumeWhereInput[]
    OR?: ResumeWhereInput[]
    NOT?: ResumeWhereInput | ResumeWhereInput[]
    userId?: IntFilter<"Resume"> | number
    fileName?: StringFilter<"Resume"> | string
    filePath?: StringFilter<"Resume"> | string
    fileType?: StringFilter<"Resume"> | string
    fileSize?: IntFilter<"Resume"> | number
    originalText?: StringFilter<"Resume"> | string
    uploadedAt?: DateTimeFilter<"Resume"> | Date | string
    updatedAt?: DateTimeFilter<"Resume"> | Date | string
    overallScore?: IntNullableFilter<"Resume"> | number | null
    atsScore?: IntNullableFilter<"Resume"> | number | null
    contactInfo?: JsonNullableFilter<"Resume">
    experience?: JsonNullableFilter<"Resume">
    education?: JsonNullableFilter<"Resume">
    skills?: JsonNullableFilter<"Resume">
    strengths?: StringNullableListFilter<"Resume">
    weaknesses?: StringNullableListFilter<"Resume">
    suggestions?: StringNullableListFilter<"Resume">
    keySkills?: StringNullableListFilter<"Resume">
    summary?: StringNullableFilter<"Resume"> | string | null
    matchedKeywords?: StringNullableListFilter<"Resume">
    missingKeywords?: StringNullableListFilter<"Resume">
    keywordDensity?: JsonNullableFilter<"Resume">
    user?: XOR<UserRelationFilter, UserWhereInput>
    jobDescriptions?: JobDescriptionListRelationFilter
    analysisHistory?: AnalysisHistoryListRelationFilter
  }, "id">

  export type ResumeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileType?: SortOrder
    fileSize?: SortOrder
    originalText?: SortOrder
    uploadedAt?: SortOrder
    updatedAt?: SortOrder
    overallScore?: SortOrderInput | SortOrder
    atsScore?: SortOrderInput | SortOrder
    contactInfo?: SortOrderInput | SortOrder
    experience?: SortOrderInput | SortOrder
    education?: SortOrderInput | SortOrder
    skills?: SortOrderInput | SortOrder
    strengths?: SortOrder
    weaknesses?: SortOrder
    suggestions?: SortOrder
    keySkills?: SortOrder
    summary?: SortOrderInput | SortOrder
    matchedKeywords?: SortOrder
    missingKeywords?: SortOrder
    keywordDensity?: SortOrderInput | SortOrder
    _count?: ResumeCountOrderByAggregateInput
    _avg?: ResumeAvgOrderByAggregateInput
    _max?: ResumeMaxOrderByAggregateInput
    _min?: ResumeMinOrderByAggregateInput
    _sum?: ResumeSumOrderByAggregateInput
  }

  export type ResumeScalarWhereWithAggregatesInput = {
    AND?: ResumeScalarWhereWithAggregatesInput | ResumeScalarWhereWithAggregatesInput[]
    OR?: ResumeScalarWhereWithAggregatesInput[]
    NOT?: ResumeScalarWhereWithAggregatesInput | ResumeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Resume"> | number
    userId?: IntWithAggregatesFilter<"Resume"> | number
    fileName?: StringWithAggregatesFilter<"Resume"> | string
    filePath?: StringWithAggregatesFilter<"Resume"> | string
    fileType?: StringWithAggregatesFilter<"Resume"> | string
    fileSize?: IntWithAggregatesFilter<"Resume"> | number
    originalText?: StringWithAggregatesFilter<"Resume"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"Resume"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Resume"> | Date | string
    overallScore?: IntNullableWithAggregatesFilter<"Resume"> | number | null
    atsScore?: IntNullableWithAggregatesFilter<"Resume"> | number | null
    contactInfo?: JsonNullableWithAggregatesFilter<"Resume">
    experience?: JsonNullableWithAggregatesFilter<"Resume">
    education?: JsonNullableWithAggregatesFilter<"Resume">
    skills?: JsonNullableWithAggregatesFilter<"Resume">
    strengths?: StringNullableListFilter<"Resume">
    weaknesses?: StringNullableListFilter<"Resume">
    suggestions?: StringNullableListFilter<"Resume">
    keySkills?: StringNullableListFilter<"Resume">
    summary?: StringNullableWithAggregatesFilter<"Resume"> | string | null
    matchedKeywords?: StringNullableListFilter<"Resume">
    missingKeywords?: StringNullableListFilter<"Resume">
    keywordDensity?: JsonNullableWithAggregatesFilter<"Resume">
  }

  export type JobDescriptionWhereInput = {
    AND?: JobDescriptionWhereInput | JobDescriptionWhereInput[]
    OR?: JobDescriptionWhereInput[]
    NOT?: JobDescriptionWhereInput | JobDescriptionWhereInput[]
    id?: IntFilter<"JobDescription"> | number
    resumeId?: IntFilter<"JobDescription"> | number
    jobTitle?: StringNullableFilter<"JobDescription"> | string | null
    company?: StringNullableFilter<"JobDescription"> | string | null
    description?: StringFilter<"JobDescription"> | string
    requiredKeywords?: StringNullableListFilter<"JobDescription">
    createdAt?: DateTimeFilter<"JobDescription"> | Date | string
    resume?: XOR<ResumeRelationFilter, ResumeWhereInput>
  }

  export type JobDescriptionOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    jobTitle?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    description?: SortOrder
    requiredKeywords?: SortOrder
    createdAt?: SortOrder
    resume?: ResumeOrderByWithRelationInput
  }

  export type JobDescriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JobDescriptionWhereInput | JobDescriptionWhereInput[]
    OR?: JobDescriptionWhereInput[]
    NOT?: JobDescriptionWhereInput | JobDescriptionWhereInput[]
    resumeId?: IntFilter<"JobDescription"> | number
    jobTitle?: StringNullableFilter<"JobDescription"> | string | null
    company?: StringNullableFilter<"JobDescription"> | string | null
    description?: StringFilter<"JobDescription"> | string
    requiredKeywords?: StringNullableListFilter<"JobDescription">
    createdAt?: DateTimeFilter<"JobDescription"> | Date | string
    resume?: XOR<ResumeRelationFilter, ResumeWhereInput>
  }, "id">

  export type JobDescriptionOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    jobTitle?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    description?: SortOrder
    requiredKeywords?: SortOrder
    createdAt?: SortOrder
    _count?: JobDescriptionCountOrderByAggregateInput
    _avg?: JobDescriptionAvgOrderByAggregateInput
    _max?: JobDescriptionMaxOrderByAggregateInput
    _min?: JobDescriptionMinOrderByAggregateInput
    _sum?: JobDescriptionSumOrderByAggregateInput
  }

  export type JobDescriptionScalarWhereWithAggregatesInput = {
    AND?: JobDescriptionScalarWhereWithAggregatesInput | JobDescriptionScalarWhereWithAggregatesInput[]
    OR?: JobDescriptionScalarWhereWithAggregatesInput[]
    NOT?: JobDescriptionScalarWhereWithAggregatesInput | JobDescriptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JobDescription"> | number
    resumeId?: IntWithAggregatesFilter<"JobDescription"> | number
    jobTitle?: StringNullableWithAggregatesFilter<"JobDescription"> | string | null
    company?: StringNullableWithAggregatesFilter<"JobDescription"> | string | null
    description?: StringWithAggregatesFilter<"JobDescription"> | string
    requiredKeywords?: StringNullableListFilter<"JobDescription">
    createdAt?: DateTimeWithAggregatesFilter<"JobDescription"> | Date | string
  }

  export type AnalysisHistoryWhereInput = {
    AND?: AnalysisHistoryWhereInput | AnalysisHistoryWhereInput[]
    OR?: AnalysisHistoryWhereInput[]
    NOT?: AnalysisHistoryWhereInput | AnalysisHistoryWhereInput[]
    id?: IntFilter<"AnalysisHistory"> | number
    resumeId?: IntFilter<"AnalysisHistory"> | number
    score?: IntFilter<"AnalysisHistory"> | number
    analyzedAt?: DateTimeFilter<"AnalysisHistory"> | Date | string
    resume?: XOR<ResumeRelationFilter, ResumeWhereInput>
  }

  export type AnalysisHistoryOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    score?: SortOrder
    analyzedAt?: SortOrder
    resume?: ResumeOrderByWithRelationInput
  }

  export type AnalysisHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AnalysisHistoryWhereInput | AnalysisHistoryWhereInput[]
    OR?: AnalysisHistoryWhereInput[]
    NOT?: AnalysisHistoryWhereInput | AnalysisHistoryWhereInput[]
    resumeId?: IntFilter<"AnalysisHistory"> | number
    score?: IntFilter<"AnalysisHistory"> | number
    analyzedAt?: DateTimeFilter<"AnalysisHistory"> | Date | string
    resume?: XOR<ResumeRelationFilter, ResumeWhereInput>
  }, "id">

  export type AnalysisHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    score?: SortOrder
    analyzedAt?: SortOrder
    _count?: AnalysisHistoryCountOrderByAggregateInput
    _avg?: AnalysisHistoryAvgOrderByAggregateInput
    _max?: AnalysisHistoryMaxOrderByAggregateInput
    _min?: AnalysisHistoryMinOrderByAggregateInput
    _sum?: AnalysisHistorySumOrderByAggregateInput
  }

  export type AnalysisHistoryScalarWhereWithAggregatesInput = {
    AND?: AnalysisHistoryScalarWhereWithAggregatesInput | AnalysisHistoryScalarWhereWithAggregatesInput[]
    OR?: AnalysisHistoryScalarWhereWithAggregatesInput[]
    NOT?: AnalysisHistoryScalarWhereWithAggregatesInput | AnalysisHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AnalysisHistory"> | number
    resumeId?: IntWithAggregatesFilter<"AnalysisHistory"> | number
    score?: IntWithAggregatesFilter<"AnalysisHistory"> | number
    analyzedAt?: DateTimeWithAggregatesFilter<"AnalysisHistory"> | Date | string
  }

  export type UserCreateInput = {
    email: string
    name?: string | null
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    resumes?: ResumeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name?: string | null
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    resumes?: ResumeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resumes?: ResumeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resumes?: ResumeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    name?: string | null
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeCreateInput = {
    fileName: string
    filePath: string
    fileType: string
    fileSize: number
    originalText: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
    overallScore?: number | null
    atsScore?: number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeCreatestrengthsInput | string[]
    weaknesses?: ResumeCreateweaknessesInput | string[]
    suggestions?: ResumeCreatesuggestionsInput | string[]
    keySkills?: ResumeCreatekeySkillsInput | string[]
    summary?: string | null
    matchedKeywords?: ResumeCreatematchedKeywordsInput | string[]
    missingKeywords?: ResumeCreatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutResumesInput
    jobDescriptions?: JobDescriptionCreateNestedManyWithoutResumeInput
    analysisHistory?: AnalysisHistoryCreateNestedManyWithoutResumeInput
  }

  export type ResumeUncheckedCreateInput = {
    id?: number
    userId: number
    fileName: string
    filePath: string
    fileType: string
    fileSize: number
    originalText: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
    overallScore?: number | null
    atsScore?: number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeCreatestrengthsInput | string[]
    weaknesses?: ResumeCreateweaknessesInput | string[]
    suggestions?: ResumeCreatesuggestionsInput | string[]
    keySkills?: ResumeCreatekeySkillsInput | string[]
    summary?: string | null
    matchedKeywords?: ResumeCreatematchedKeywordsInput | string[]
    missingKeywords?: ResumeCreatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
    jobDescriptions?: JobDescriptionUncheckedCreateNestedManyWithoutResumeInput
    analysisHistory?: AnalysisHistoryUncheckedCreateNestedManyWithoutResumeInput
  }

  export type ResumeUpdateInput = {
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    originalText?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    atsScore?: NullableIntFieldUpdateOperationsInput | number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeUpdatestrengthsInput | string[]
    weaknesses?: ResumeUpdateweaknessesInput | string[]
    suggestions?: ResumeUpdatesuggestionsInput | string[]
    keySkills?: ResumeUpdatekeySkillsInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    matchedKeywords?: ResumeUpdatematchedKeywordsInput | string[]
    missingKeywords?: ResumeUpdatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    jobDescriptions?: JobDescriptionUpdateManyWithoutResumeNestedInput
    analysisHistory?: AnalysisHistoryUpdateManyWithoutResumeNestedInput
  }

  export type ResumeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    originalText?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    atsScore?: NullableIntFieldUpdateOperationsInput | number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeUpdatestrengthsInput | string[]
    weaknesses?: ResumeUpdateweaknessesInput | string[]
    suggestions?: ResumeUpdatesuggestionsInput | string[]
    keySkills?: ResumeUpdatekeySkillsInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    matchedKeywords?: ResumeUpdatematchedKeywordsInput | string[]
    missingKeywords?: ResumeUpdatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
    jobDescriptions?: JobDescriptionUncheckedUpdateManyWithoutResumeNestedInput
    analysisHistory?: AnalysisHistoryUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type ResumeCreateManyInput = {
    id?: number
    userId: number
    fileName: string
    filePath: string
    fileType: string
    fileSize: number
    originalText: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
    overallScore?: number | null
    atsScore?: number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeCreatestrengthsInput | string[]
    weaknesses?: ResumeCreateweaknessesInput | string[]
    suggestions?: ResumeCreatesuggestionsInput | string[]
    keySkills?: ResumeCreatekeySkillsInput | string[]
    summary?: string | null
    matchedKeywords?: ResumeCreatematchedKeywordsInput | string[]
    missingKeywords?: ResumeCreatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ResumeUpdateManyMutationInput = {
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    originalText?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    atsScore?: NullableIntFieldUpdateOperationsInput | number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeUpdatestrengthsInput | string[]
    weaknesses?: ResumeUpdateweaknessesInput | string[]
    suggestions?: ResumeUpdatesuggestionsInput | string[]
    keySkills?: ResumeUpdatekeySkillsInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    matchedKeywords?: ResumeUpdatematchedKeywordsInput | string[]
    missingKeywords?: ResumeUpdatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ResumeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    originalText?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    atsScore?: NullableIntFieldUpdateOperationsInput | number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeUpdatestrengthsInput | string[]
    weaknesses?: ResumeUpdateweaknessesInput | string[]
    suggestions?: ResumeUpdatesuggestionsInput | string[]
    keySkills?: ResumeUpdatekeySkillsInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    matchedKeywords?: ResumeUpdatematchedKeywordsInput | string[]
    missingKeywords?: ResumeUpdatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JobDescriptionCreateInput = {
    jobTitle?: string | null
    company?: string | null
    description: string
    requiredKeywords?: JobDescriptionCreaterequiredKeywordsInput | string[]
    createdAt?: Date | string
    resume: ResumeCreateNestedOneWithoutJobDescriptionsInput
  }

  export type JobDescriptionUncheckedCreateInput = {
    id?: number
    resumeId: number
    jobTitle?: string | null
    company?: string | null
    description: string
    requiredKeywords?: JobDescriptionCreaterequiredKeywordsInput | string[]
    createdAt?: Date | string
  }

  export type JobDescriptionUpdateInput = {
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    requiredKeywords?: JobDescriptionUpdaterequiredKeywordsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resume?: ResumeUpdateOneRequiredWithoutJobDescriptionsNestedInput
  }

  export type JobDescriptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    requiredKeywords?: JobDescriptionUpdaterequiredKeywordsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobDescriptionCreateManyInput = {
    id?: number
    resumeId: number
    jobTitle?: string | null
    company?: string | null
    description: string
    requiredKeywords?: JobDescriptionCreaterequiredKeywordsInput | string[]
    createdAt?: Date | string
  }

  export type JobDescriptionUpdateManyMutationInput = {
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    requiredKeywords?: JobDescriptionUpdaterequiredKeywordsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobDescriptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    requiredKeywords?: JobDescriptionUpdaterequiredKeywordsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalysisHistoryCreateInput = {
    score: number
    analyzedAt?: Date | string
    resume: ResumeCreateNestedOneWithoutAnalysisHistoryInput
  }

  export type AnalysisHistoryUncheckedCreateInput = {
    id?: number
    resumeId: number
    score: number
    analyzedAt?: Date | string
  }

  export type AnalysisHistoryUpdateInput = {
    score?: IntFieldUpdateOperationsInput | number
    analyzedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resume?: ResumeUpdateOneRequiredWithoutAnalysisHistoryNestedInput
  }

  export type AnalysisHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    analyzedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalysisHistoryCreateManyInput = {
    id?: number
    resumeId: number
    score: number
    analyzedAt?: Date | string
  }

  export type AnalysisHistoryUpdateManyMutationInput = {
    score?: IntFieldUpdateOperationsInput | number
    analyzedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalysisHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    analyzedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ResumeListRelationFilter = {
    every?: ResumeWhereInput
    some?: ResumeWhereInput
    none?: ResumeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ResumeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    hashedPassword?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    hashedPassword?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    hashedPassword?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type JobDescriptionListRelationFilter = {
    every?: JobDescriptionWhereInput
    some?: JobDescriptionWhereInput
    none?: JobDescriptionWhereInput
  }

  export type AnalysisHistoryListRelationFilter = {
    every?: AnalysisHistoryWhereInput
    some?: AnalysisHistoryWhereInput
    none?: AnalysisHistoryWhereInput
  }

  export type JobDescriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnalysisHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResumeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileType?: SortOrder
    fileSize?: SortOrder
    originalText?: SortOrder
    uploadedAt?: SortOrder
    updatedAt?: SortOrder
    overallScore?: SortOrder
    atsScore?: SortOrder
    contactInfo?: SortOrder
    experience?: SortOrder
    education?: SortOrder
    skills?: SortOrder
    strengths?: SortOrder
    weaknesses?: SortOrder
    suggestions?: SortOrder
    keySkills?: SortOrder
    summary?: SortOrder
    matchedKeywords?: SortOrder
    missingKeywords?: SortOrder
    keywordDensity?: SortOrder
  }

  export type ResumeAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fileSize?: SortOrder
    overallScore?: SortOrder
    atsScore?: SortOrder
  }

  export type ResumeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileType?: SortOrder
    fileSize?: SortOrder
    originalText?: SortOrder
    uploadedAt?: SortOrder
    updatedAt?: SortOrder
    overallScore?: SortOrder
    atsScore?: SortOrder
    summary?: SortOrder
  }

  export type ResumeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileType?: SortOrder
    fileSize?: SortOrder
    originalText?: SortOrder
    uploadedAt?: SortOrder
    updatedAt?: SortOrder
    overallScore?: SortOrder
    atsScore?: SortOrder
    summary?: SortOrder
  }

  export type ResumeSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fileSize?: SortOrder
    overallScore?: SortOrder
    atsScore?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type ResumeRelationFilter = {
    is?: ResumeWhereInput
    isNot?: ResumeWhereInput
  }

  export type JobDescriptionCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    jobTitle?: SortOrder
    company?: SortOrder
    description?: SortOrder
    requiredKeywords?: SortOrder
    createdAt?: SortOrder
  }

  export type JobDescriptionAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type JobDescriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    jobTitle?: SortOrder
    company?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type JobDescriptionMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    jobTitle?: SortOrder
    company?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type JobDescriptionSumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
  }

  export type AnalysisHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    score?: SortOrder
    analyzedAt?: SortOrder
  }

  export type AnalysisHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    score?: SortOrder
  }

  export type AnalysisHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    score?: SortOrder
    analyzedAt?: SortOrder
  }

  export type AnalysisHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    score?: SortOrder
    analyzedAt?: SortOrder
  }

  export type AnalysisHistorySumOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    score?: SortOrder
  }

  export type ResumeCreateNestedManyWithoutUserInput = {
    create?: XOR<ResumeCreateWithoutUserInput, ResumeUncheckedCreateWithoutUserInput> | ResumeCreateWithoutUserInput[] | ResumeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResumeCreateOrConnectWithoutUserInput | ResumeCreateOrConnectWithoutUserInput[]
    createMany?: ResumeCreateManyUserInputEnvelope
    connect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
  }

  export type ResumeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ResumeCreateWithoutUserInput, ResumeUncheckedCreateWithoutUserInput> | ResumeCreateWithoutUserInput[] | ResumeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResumeCreateOrConnectWithoutUserInput | ResumeCreateOrConnectWithoutUserInput[]
    createMany?: ResumeCreateManyUserInputEnvelope
    connect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ResumeUpdateManyWithoutUserNestedInput = {
    create?: XOR<ResumeCreateWithoutUserInput, ResumeUncheckedCreateWithoutUserInput> | ResumeCreateWithoutUserInput[] | ResumeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResumeCreateOrConnectWithoutUserInput | ResumeCreateOrConnectWithoutUserInput[]
    upsert?: ResumeUpsertWithWhereUniqueWithoutUserInput | ResumeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ResumeCreateManyUserInputEnvelope
    set?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    disconnect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    delete?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    connect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    update?: ResumeUpdateWithWhereUniqueWithoutUserInput | ResumeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ResumeUpdateManyWithWhereWithoutUserInput | ResumeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ResumeScalarWhereInput | ResumeScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ResumeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ResumeCreateWithoutUserInput, ResumeUncheckedCreateWithoutUserInput> | ResumeCreateWithoutUserInput[] | ResumeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResumeCreateOrConnectWithoutUserInput | ResumeCreateOrConnectWithoutUserInput[]
    upsert?: ResumeUpsertWithWhereUniqueWithoutUserInput | ResumeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ResumeCreateManyUserInputEnvelope
    set?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    disconnect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    delete?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    connect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    update?: ResumeUpdateWithWhereUniqueWithoutUserInput | ResumeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ResumeUpdateManyWithWhereWithoutUserInput | ResumeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ResumeScalarWhereInput | ResumeScalarWhereInput[]
  }

  export type ResumeCreatestrengthsInput = {
    set: string[]
  }

  export type ResumeCreateweaknessesInput = {
    set: string[]
  }

  export type ResumeCreatesuggestionsInput = {
    set: string[]
  }

  export type ResumeCreatekeySkillsInput = {
    set: string[]
  }

  export type ResumeCreatematchedKeywordsInput = {
    set: string[]
  }

  export type ResumeCreatemissingKeywordsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutResumesInput = {
    create?: XOR<UserCreateWithoutResumesInput, UserUncheckedCreateWithoutResumesInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumesInput
    connect?: UserWhereUniqueInput
  }

  export type JobDescriptionCreateNestedManyWithoutResumeInput = {
    create?: XOR<JobDescriptionCreateWithoutResumeInput, JobDescriptionUncheckedCreateWithoutResumeInput> | JobDescriptionCreateWithoutResumeInput[] | JobDescriptionUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: JobDescriptionCreateOrConnectWithoutResumeInput | JobDescriptionCreateOrConnectWithoutResumeInput[]
    createMany?: JobDescriptionCreateManyResumeInputEnvelope
    connect?: JobDescriptionWhereUniqueInput | JobDescriptionWhereUniqueInput[]
  }

  export type AnalysisHistoryCreateNestedManyWithoutResumeInput = {
    create?: XOR<AnalysisHistoryCreateWithoutResumeInput, AnalysisHistoryUncheckedCreateWithoutResumeInput> | AnalysisHistoryCreateWithoutResumeInput[] | AnalysisHistoryUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: AnalysisHistoryCreateOrConnectWithoutResumeInput | AnalysisHistoryCreateOrConnectWithoutResumeInput[]
    createMany?: AnalysisHistoryCreateManyResumeInputEnvelope
    connect?: AnalysisHistoryWhereUniqueInput | AnalysisHistoryWhereUniqueInput[]
  }

  export type JobDescriptionUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<JobDescriptionCreateWithoutResumeInput, JobDescriptionUncheckedCreateWithoutResumeInput> | JobDescriptionCreateWithoutResumeInput[] | JobDescriptionUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: JobDescriptionCreateOrConnectWithoutResumeInput | JobDescriptionCreateOrConnectWithoutResumeInput[]
    createMany?: JobDescriptionCreateManyResumeInputEnvelope
    connect?: JobDescriptionWhereUniqueInput | JobDescriptionWhereUniqueInput[]
  }

  export type AnalysisHistoryUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<AnalysisHistoryCreateWithoutResumeInput, AnalysisHistoryUncheckedCreateWithoutResumeInput> | AnalysisHistoryCreateWithoutResumeInput[] | AnalysisHistoryUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: AnalysisHistoryCreateOrConnectWithoutResumeInput | AnalysisHistoryCreateOrConnectWithoutResumeInput[]
    createMany?: AnalysisHistoryCreateManyResumeInputEnvelope
    connect?: AnalysisHistoryWhereUniqueInput | AnalysisHistoryWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ResumeUpdatestrengthsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ResumeUpdateweaknessesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ResumeUpdatesuggestionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ResumeUpdatekeySkillsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ResumeUpdatematchedKeywordsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ResumeUpdatemissingKeywordsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutResumesNestedInput = {
    create?: XOR<UserCreateWithoutResumesInput, UserUncheckedCreateWithoutResumesInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumesInput
    upsert?: UserUpsertWithoutResumesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResumesInput, UserUpdateWithoutResumesInput>, UserUncheckedUpdateWithoutResumesInput>
  }

  export type JobDescriptionUpdateManyWithoutResumeNestedInput = {
    create?: XOR<JobDescriptionCreateWithoutResumeInput, JobDescriptionUncheckedCreateWithoutResumeInput> | JobDescriptionCreateWithoutResumeInput[] | JobDescriptionUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: JobDescriptionCreateOrConnectWithoutResumeInput | JobDescriptionCreateOrConnectWithoutResumeInput[]
    upsert?: JobDescriptionUpsertWithWhereUniqueWithoutResumeInput | JobDescriptionUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: JobDescriptionCreateManyResumeInputEnvelope
    set?: JobDescriptionWhereUniqueInput | JobDescriptionWhereUniqueInput[]
    disconnect?: JobDescriptionWhereUniqueInput | JobDescriptionWhereUniqueInput[]
    delete?: JobDescriptionWhereUniqueInput | JobDescriptionWhereUniqueInput[]
    connect?: JobDescriptionWhereUniqueInput | JobDescriptionWhereUniqueInput[]
    update?: JobDescriptionUpdateWithWhereUniqueWithoutResumeInput | JobDescriptionUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: JobDescriptionUpdateManyWithWhereWithoutResumeInput | JobDescriptionUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: JobDescriptionScalarWhereInput | JobDescriptionScalarWhereInput[]
  }

  export type AnalysisHistoryUpdateManyWithoutResumeNestedInput = {
    create?: XOR<AnalysisHistoryCreateWithoutResumeInput, AnalysisHistoryUncheckedCreateWithoutResumeInput> | AnalysisHistoryCreateWithoutResumeInput[] | AnalysisHistoryUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: AnalysisHistoryCreateOrConnectWithoutResumeInput | AnalysisHistoryCreateOrConnectWithoutResumeInput[]
    upsert?: AnalysisHistoryUpsertWithWhereUniqueWithoutResumeInput | AnalysisHistoryUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: AnalysisHistoryCreateManyResumeInputEnvelope
    set?: AnalysisHistoryWhereUniqueInput | AnalysisHistoryWhereUniqueInput[]
    disconnect?: AnalysisHistoryWhereUniqueInput | AnalysisHistoryWhereUniqueInput[]
    delete?: AnalysisHistoryWhereUniqueInput | AnalysisHistoryWhereUniqueInput[]
    connect?: AnalysisHistoryWhereUniqueInput | AnalysisHistoryWhereUniqueInput[]
    update?: AnalysisHistoryUpdateWithWhereUniqueWithoutResumeInput | AnalysisHistoryUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: AnalysisHistoryUpdateManyWithWhereWithoutResumeInput | AnalysisHistoryUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: AnalysisHistoryScalarWhereInput | AnalysisHistoryScalarWhereInput[]
  }

  export type JobDescriptionUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<JobDescriptionCreateWithoutResumeInput, JobDescriptionUncheckedCreateWithoutResumeInput> | JobDescriptionCreateWithoutResumeInput[] | JobDescriptionUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: JobDescriptionCreateOrConnectWithoutResumeInput | JobDescriptionCreateOrConnectWithoutResumeInput[]
    upsert?: JobDescriptionUpsertWithWhereUniqueWithoutResumeInput | JobDescriptionUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: JobDescriptionCreateManyResumeInputEnvelope
    set?: JobDescriptionWhereUniqueInput | JobDescriptionWhereUniqueInput[]
    disconnect?: JobDescriptionWhereUniqueInput | JobDescriptionWhereUniqueInput[]
    delete?: JobDescriptionWhereUniqueInput | JobDescriptionWhereUniqueInput[]
    connect?: JobDescriptionWhereUniqueInput | JobDescriptionWhereUniqueInput[]
    update?: JobDescriptionUpdateWithWhereUniqueWithoutResumeInput | JobDescriptionUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: JobDescriptionUpdateManyWithWhereWithoutResumeInput | JobDescriptionUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: JobDescriptionScalarWhereInput | JobDescriptionScalarWhereInput[]
  }

  export type AnalysisHistoryUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<AnalysisHistoryCreateWithoutResumeInput, AnalysisHistoryUncheckedCreateWithoutResumeInput> | AnalysisHistoryCreateWithoutResumeInput[] | AnalysisHistoryUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: AnalysisHistoryCreateOrConnectWithoutResumeInput | AnalysisHistoryCreateOrConnectWithoutResumeInput[]
    upsert?: AnalysisHistoryUpsertWithWhereUniqueWithoutResumeInput | AnalysisHistoryUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: AnalysisHistoryCreateManyResumeInputEnvelope
    set?: AnalysisHistoryWhereUniqueInput | AnalysisHistoryWhereUniqueInput[]
    disconnect?: AnalysisHistoryWhereUniqueInput | AnalysisHistoryWhereUniqueInput[]
    delete?: AnalysisHistoryWhereUniqueInput | AnalysisHistoryWhereUniqueInput[]
    connect?: AnalysisHistoryWhereUniqueInput | AnalysisHistoryWhereUniqueInput[]
    update?: AnalysisHistoryUpdateWithWhereUniqueWithoutResumeInput | AnalysisHistoryUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: AnalysisHistoryUpdateManyWithWhereWithoutResumeInput | AnalysisHistoryUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: AnalysisHistoryScalarWhereInput | AnalysisHistoryScalarWhereInput[]
  }

  export type JobDescriptionCreaterequiredKeywordsInput = {
    set: string[]
  }

  export type ResumeCreateNestedOneWithoutJobDescriptionsInput = {
    create?: XOR<ResumeCreateWithoutJobDescriptionsInput, ResumeUncheckedCreateWithoutJobDescriptionsInput>
    connectOrCreate?: ResumeCreateOrConnectWithoutJobDescriptionsInput
    connect?: ResumeWhereUniqueInput
  }

  export type JobDescriptionUpdaterequiredKeywordsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ResumeUpdateOneRequiredWithoutJobDescriptionsNestedInput = {
    create?: XOR<ResumeCreateWithoutJobDescriptionsInput, ResumeUncheckedCreateWithoutJobDescriptionsInput>
    connectOrCreate?: ResumeCreateOrConnectWithoutJobDescriptionsInput
    upsert?: ResumeUpsertWithoutJobDescriptionsInput
    connect?: ResumeWhereUniqueInput
    update?: XOR<XOR<ResumeUpdateToOneWithWhereWithoutJobDescriptionsInput, ResumeUpdateWithoutJobDescriptionsInput>, ResumeUncheckedUpdateWithoutJobDescriptionsInput>
  }

  export type ResumeCreateNestedOneWithoutAnalysisHistoryInput = {
    create?: XOR<ResumeCreateWithoutAnalysisHistoryInput, ResumeUncheckedCreateWithoutAnalysisHistoryInput>
    connectOrCreate?: ResumeCreateOrConnectWithoutAnalysisHistoryInput
    connect?: ResumeWhereUniqueInput
  }

  export type ResumeUpdateOneRequiredWithoutAnalysisHistoryNestedInput = {
    create?: XOR<ResumeCreateWithoutAnalysisHistoryInput, ResumeUncheckedCreateWithoutAnalysisHistoryInput>
    connectOrCreate?: ResumeCreateOrConnectWithoutAnalysisHistoryInput
    upsert?: ResumeUpsertWithoutAnalysisHistoryInput
    connect?: ResumeWhereUniqueInput
    update?: XOR<XOR<ResumeUpdateToOneWithWhereWithoutAnalysisHistoryInput, ResumeUpdateWithoutAnalysisHistoryInput>, ResumeUncheckedUpdateWithoutAnalysisHistoryInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ResumeCreateWithoutUserInput = {
    fileName: string
    filePath: string
    fileType: string
    fileSize: number
    originalText: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
    overallScore?: number | null
    atsScore?: number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeCreatestrengthsInput | string[]
    weaknesses?: ResumeCreateweaknessesInput | string[]
    suggestions?: ResumeCreatesuggestionsInput | string[]
    keySkills?: ResumeCreatekeySkillsInput | string[]
    summary?: string | null
    matchedKeywords?: ResumeCreatematchedKeywordsInput | string[]
    missingKeywords?: ResumeCreatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
    jobDescriptions?: JobDescriptionCreateNestedManyWithoutResumeInput
    analysisHistory?: AnalysisHistoryCreateNestedManyWithoutResumeInput
  }

  export type ResumeUncheckedCreateWithoutUserInput = {
    id?: number
    fileName: string
    filePath: string
    fileType: string
    fileSize: number
    originalText: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
    overallScore?: number | null
    atsScore?: number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeCreatestrengthsInput | string[]
    weaknesses?: ResumeCreateweaknessesInput | string[]
    suggestions?: ResumeCreatesuggestionsInput | string[]
    keySkills?: ResumeCreatekeySkillsInput | string[]
    summary?: string | null
    matchedKeywords?: ResumeCreatematchedKeywordsInput | string[]
    missingKeywords?: ResumeCreatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
    jobDescriptions?: JobDescriptionUncheckedCreateNestedManyWithoutResumeInput
    analysisHistory?: AnalysisHistoryUncheckedCreateNestedManyWithoutResumeInput
  }

  export type ResumeCreateOrConnectWithoutUserInput = {
    where: ResumeWhereUniqueInput
    create: XOR<ResumeCreateWithoutUserInput, ResumeUncheckedCreateWithoutUserInput>
  }

  export type ResumeCreateManyUserInputEnvelope = {
    data: ResumeCreateManyUserInput | ResumeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ResumeUpsertWithWhereUniqueWithoutUserInput = {
    where: ResumeWhereUniqueInput
    update: XOR<ResumeUpdateWithoutUserInput, ResumeUncheckedUpdateWithoutUserInput>
    create: XOR<ResumeCreateWithoutUserInput, ResumeUncheckedCreateWithoutUserInput>
  }

  export type ResumeUpdateWithWhereUniqueWithoutUserInput = {
    where: ResumeWhereUniqueInput
    data: XOR<ResumeUpdateWithoutUserInput, ResumeUncheckedUpdateWithoutUserInput>
  }

  export type ResumeUpdateManyWithWhereWithoutUserInput = {
    where: ResumeScalarWhereInput
    data: XOR<ResumeUpdateManyMutationInput, ResumeUncheckedUpdateManyWithoutUserInput>
  }

  export type ResumeScalarWhereInput = {
    AND?: ResumeScalarWhereInput | ResumeScalarWhereInput[]
    OR?: ResumeScalarWhereInput[]
    NOT?: ResumeScalarWhereInput | ResumeScalarWhereInput[]
    id?: IntFilter<"Resume"> | number
    userId?: IntFilter<"Resume"> | number
    fileName?: StringFilter<"Resume"> | string
    filePath?: StringFilter<"Resume"> | string
    fileType?: StringFilter<"Resume"> | string
    fileSize?: IntFilter<"Resume"> | number
    originalText?: StringFilter<"Resume"> | string
    uploadedAt?: DateTimeFilter<"Resume"> | Date | string
    updatedAt?: DateTimeFilter<"Resume"> | Date | string
    overallScore?: IntNullableFilter<"Resume"> | number | null
    atsScore?: IntNullableFilter<"Resume"> | number | null
    contactInfo?: JsonNullableFilter<"Resume">
    experience?: JsonNullableFilter<"Resume">
    education?: JsonNullableFilter<"Resume">
    skills?: JsonNullableFilter<"Resume">
    strengths?: StringNullableListFilter<"Resume">
    weaknesses?: StringNullableListFilter<"Resume">
    suggestions?: StringNullableListFilter<"Resume">
    keySkills?: StringNullableListFilter<"Resume">
    summary?: StringNullableFilter<"Resume"> | string | null
    matchedKeywords?: StringNullableListFilter<"Resume">
    missingKeywords?: StringNullableListFilter<"Resume">
    keywordDensity?: JsonNullableFilter<"Resume">
  }

  export type UserCreateWithoutResumesInput = {
    email: string
    name?: string | null
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutResumesInput = {
    id?: number
    email: string
    name?: string | null
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutResumesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResumesInput, UserUncheckedCreateWithoutResumesInput>
  }

  export type JobDescriptionCreateWithoutResumeInput = {
    jobTitle?: string | null
    company?: string | null
    description: string
    requiredKeywords?: JobDescriptionCreaterequiredKeywordsInput | string[]
    createdAt?: Date | string
  }

  export type JobDescriptionUncheckedCreateWithoutResumeInput = {
    id?: number
    jobTitle?: string | null
    company?: string | null
    description: string
    requiredKeywords?: JobDescriptionCreaterequiredKeywordsInput | string[]
    createdAt?: Date | string
  }

  export type JobDescriptionCreateOrConnectWithoutResumeInput = {
    where: JobDescriptionWhereUniqueInput
    create: XOR<JobDescriptionCreateWithoutResumeInput, JobDescriptionUncheckedCreateWithoutResumeInput>
  }

  export type JobDescriptionCreateManyResumeInputEnvelope = {
    data: JobDescriptionCreateManyResumeInput | JobDescriptionCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type AnalysisHistoryCreateWithoutResumeInput = {
    score: number
    analyzedAt?: Date | string
  }

  export type AnalysisHistoryUncheckedCreateWithoutResumeInput = {
    id?: number
    score: number
    analyzedAt?: Date | string
  }

  export type AnalysisHistoryCreateOrConnectWithoutResumeInput = {
    where: AnalysisHistoryWhereUniqueInput
    create: XOR<AnalysisHistoryCreateWithoutResumeInput, AnalysisHistoryUncheckedCreateWithoutResumeInput>
  }

  export type AnalysisHistoryCreateManyResumeInputEnvelope = {
    data: AnalysisHistoryCreateManyResumeInput | AnalysisHistoryCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutResumesInput = {
    update: XOR<UserUpdateWithoutResumesInput, UserUncheckedUpdateWithoutResumesInput>
    create: XOR<UserCreateWithoutResumesInput, UserUncheckedCreateWithoutResumesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResumesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResumesInput, UserUncheckedUpdateWithoutResumesInput>
  }

  export type UserUpdateWithoutResumesInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutResumesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobDescriptionUpsertWithWhereUniqueWithoutResumeInput = {
    where: JobDescriptionWhereUniqueInput
    update: XOR<JobDescriptionUpdateWithoutResumeInput, JobDescriptionUncheckedUpdateWithoutResumeInput>
    create: XOR<JobDescriptionCreateWithoutResumeInput, JobDescriptionUncheckedCreateWithoutResumeInput>
  }

  export type JobDescriptionUpdateWithWhereUniqueWithoutResumeInput = {
    where: JobDescriptionWhereUniqueInput
    data: XOR<JobDescriptionUpdateWithoutResumeInput, JobDescriptionUncheckedUpdateWithoutResumeInput>
  }

  export type JobDescriptionUpdateManyWithWhereWithoutResumeInput = {
    where: JobDescriptionScalarWhereInput
    data: XOR<JobDescriptionUpdateManyMutationInput, JobDescriptionUncheckedUpdateManyWithoutResumeInput>
  }

  export type JobDescriptionScalarWhereInput = {
    AND?: JobDescriptionScalarWhereInput | JobDescriptionScalarWhereInput[]
    OR?: JobDescriptionScalarWhereInput[]
    NOT?: JobDescriptionScalarWhereInput | JobDescriptionScalarWhereInput[]
    id?: IntFilter<"JobDescription"> | number
    resumeId?: IntFilter<"JobDescription"> | number
    jobTitle?: StringNullableFilter<"JobDescription"> | string | null
    company?: StringNullableFilter<"JobDescription"> | string | null
    description?: StringFilter<"JobDescription"> | string
    requiredKeywords?: StringNullableListFilter<"JobDescription">
    createdAt?: DateTimeFilter<"JobDescription"> | Date | string
  }

  export type AnalysisHistoryUpsertWithWhereUniqueWithoutResumeInput = {
    where: AnalysisHistoryWhereUniqueInput
    update: XOR<AnalysisHistoryUpdateWithoutResumeInput, AnalysisHistoryUncheckedUpdateWithoutResumeInput>
    create: XOR<AnalysisHistoryCreateWithoutResumeInput, AnalysisHistoryUncheckedCreateWithoutResumeInput>
  }

  export type AnalysisHistoryUpdateWithWhereUniqueWithoutResumeInput = {
    where: AnalysisHistoryWhereUniqueInput
    data: XOR<AnalysisHistoryUpdateWithoutResumeInput, AnalysisHistoryUncheckedUpdateWithoutResumeInput>
  }

  export type AnalysisHistoryUpdateManyWithWhereWithoutResumeInput = {
    where: AnalysisHistoryScalarWhereInput
    data: XOR<AnalysisHistoryUpdateManyMutationInput, AnalysisHistoryUncheckedUpdateManyWithoutResumeInput>
  }

  export type AnalysisHistoryScalarWhereInput = {
    AND?: AnalysisHistoryScalarWhereInput | AnalysisHistoryScalarWhereInput[]
    OR?: AnalysisHistoryScalarWhereInput[]
    NOT?: AnalysisHistoryScalarWhereInput | AnalysisHistoryScalarWhereInput[]
    id?: IntFilter<"AnalysisHistory"> | number
    resumeId?: IntFilter<"AnalysisHistory"> | number
    score?: IntFilter<"AnalysisHistory"> | number
    analyzedAt?: DateTimeFilter<"AnalysisHistory"> | Date | string
  }

  export type ResumeCreateWithoutJobDescriptionsInput = {
    fileName: string
    filePath: string
    fileType: string
    fileSize: number
    originalText: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
    overallScore?: number | null
    atsScore?: number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeCreatestrengthsInput | string[]
    weaknesses?: ResumeCreateweaknessesInput | string[]
    suggestions?: ResumeCreatesuggestionsInput | string[]
    keySkills?: ResumeCreatekeySkillsInput | string[]
    summary?: string | null
    matchedKeywords?: ResumeCreatematchedKeywordsInput | string[]
    missingKeywords?: ResumeCreatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutResumesInput
    analysisHistory?: AnalysisHistoryCreateNestedManyWithoutResumeInput
  }

  export type ResumeUncheckedCreateWithoutJobDescriptionsInput = {
    id?: number
    userId: number
    fileName: string
    filePath: string
    fileType: string
    fileSize: number
    originalText: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
    overallScore?: number | null
    atsScore?: number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeCreatestrengthsInput | string[]
    weaknesses?: ResumeCreateweaknessesInput | string[]
    suggestions?: ResumeCreatesuggestionsInput | string[]
    keySkills?: ResumeCreatekeySkillsInput | string[]
    summary?: string | null
    matchedKeywords?: ResumeCreatematchedKeywordsInput | string[]
    missingKeywords?: ResumeCreatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
    analysisHistory?: AnalysisHistoryUncheckedCreateNestedManyWithoutResumeInput
  }

  export type ResumeCreateOrConnectWithoutJobDescriptionsInput = {
    where: ResumeWhereUniqueInput
    create: XOR<ResumeCreateWithoutJobDescriptionsInput, ResumeUncheckedCreateWithoutJobDescriptionsInput>
  }

  export type ResumeUpsertWithoutJobDescriptionsInput = {
    update: XOR<ResumeUpdateWithoutJobDescriptionsInput, ResumeUncheckedUpdateWithoutJobDescriptionsInput>
    create: XOR<ResumeCreateWithoutJobDescriptionsInput, ResumeUncheckedCreateWithoutJobDescriptionsInput>
    where?: ResumeWhereInput
  }

  export type ResumeUpdateToOneWithWhereWithoutJobDescriptionsInput = {
    where?: ResumeWhereInput
    data: XOR<ResumeUpdateWithoutJobDescriptionsInput, ResumeUncheckedUpdateWithoutJobDescriptionsInput>
  }

  export type ResumeUpdateWithoutJobDescriptionsInput = {
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    originalText?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    atsScore?: NullableIntFieldUpdateOperationsInput | number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeUpdatestrengthsInput | string[]
    weaknesses?: ResumeUpdateweaknessesInput | string[]
    suggestions?: ResumeUpdatesuggestionsInput | string[]
    keySkills?: ResumeUpdatekeySkillsInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    matchedKeywords?: ResumeUpdatematchedKeywordsInput | string[]
    missingKeywords?: ResumeUpdatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    analysisHistory?: AnalysisHistoryUpdateManyWithoutResumeNestedInput
  }

  export type ResumeUncheckedUpdateWithoutJobDescriptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    originalText?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    atsScore?: NullableIntFieldUpdateOperationsInput | number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeUpdatestrengthsInput | string[]
    weaknesses?: ResumeUpdateweaknessesInput | string[]
    suggestions?: ResumeUpdatesuggestionsInput | string[]
    keySkills?: ResumeUpdatekeySkillsInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    matchedKeywords?: ResumeUpdatematchedKeywordsInput | string[]
    missingKeywords?: ResumeUpdatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
    analysisHistory?: AnalysisHistoryUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type ResumeCreateWithoutAnalysisHistoryInput = {
    fileName: string
    filePath: string
    fileType: string
    fileSize: number
    originalText: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
    overallScore?: number | null
    atsScore?: number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeCreatestrengthsInput | string[]
    weaknesses?: ResumeCreateweaknessesInput | string[]
    suggestions?: ResumeCreatesuggestionsInput | string[]
    keySkills?: ResumeCreatekeySkillsInput | string[]
    summary?: string | null
    matchedKeywords?: ResumeCreatematchedKeywordsInput | string[]
    missingKeywords?: ResumeCreatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutResumesInput
    jobDescriptions?: JobDescriptionCreateNestedManyWithoutResumeInput
  }

  export type ResumeUncheckedCreateWithoutAnalysisHistoryInput = {
    id?: number
    userId: number
    fileName: string
    filePath: string
    fileType: string
    fileSize: number
    originalText: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
    overallScore?: number | null
    atsScore?: number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeCreatestrengthsInput | string[]
    weaknesses?: ResumeCreateweaknessesInput | string[]
    suggestions?: ResumeCreatesuggestionsInput | string[]
    keySkills?: ResumeCreatekeySkillsInput | string[]
    summary?: string | null
    matchedKeywords?: ResumeCreatematchedKeywordsInput | string[]
    missingKeywords?: ResumeCreatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
    jobDescriptions?: JobDescriptionUncheckedCreateNestedManyWithoutResumeInput
  }

  export type ResumeCreateOrConnectWithoutAnalysisHistoryInput = {
    where: ResumeWhereUniqueInput
    create: XOR<ResumeCreateWithoutAnalysisHistoryInput, ResumeUncheckedCreateWithoutAnalysisHistoryInput>
  }

  export type ResumeUpsertWithoutAnalysisHistoryInput = {
    update: XOR<ResumeUpdateWithoutAnalysisHistoryInput, ResumeUncheckedUpdateWithoutAnalysisHistoryInput>
    create: XOR<ResumeCreateWithoutAnalysisHistoryInput, ResumeUncheckedCreateWithoutAnalysisHistoryInput>
    where?: ResumeWhereInput
  }

  export type ResumeUpdateToOneWithWhereWithoutAnalysisHistoryInput = {
    where?: ResumeWhereInput
    data: XOR<ResumeUpdateWithoutAnalysisHistoryInput, ResumeUncheckedUpdateWithoutAnalysisHistoryInput>
  }

  export type ResumeUpdateWithoutAnalysisHistoryInput = {
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    originalText?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    atsScore?: NullableIntFieldUpdateOperationsInput | number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeUpdatestrengthsInput | string[]
    weaknesses?: ResumeUpdateweaknessesInput | string[]
    suggestions?: ResumeUpdatesuggestionsInput | string[]
    keySkills?: ResumeUpdatekeySkillsInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    matchedKeywords?: ResumeUpdatematchedKeywordsInput | string[]
    missingKeywords?: ResumeUpdatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutResumesNestedInput
    jobDescriptions?: JobDescriptionUpdateManyWithoutResumeNestedInput
  }

  export type ResumeUncheckedUpdateWithoutAnalysisHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    originalText?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    atsScore?: NullableIntFieldUpdateOperationsInput | number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeUpdatestrengthsInput | string[]
    weaknesses?: ResumeUpdateweaknessesInput | string[]
    suggestions?: ResumeUpdatesuggestionsInput | string[]
    keySkills?: ResumeUpdatekeySkillsInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    matchedKeywords?: ResumeUpdatematchedKeywordsInput | string[]
    missingKeywords?: ResumeUpdatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
    jobDescriptions?: JobDescriptionUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type ResumeCreateManyUserInput = {
    id?: number
    fileName: string
    filePath: string
    fileType: string
    fileSize: number
    originalText: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
    overallScore?: number | null
    atsScore?: number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeCreatestrengthsInput | string[]
    weaknesses?: ResumeCreateweaknessesInput | string[]
    suggestions?: ResumeCreatesuggestionsInput | string[]
    keySkills?: ResumeCreatekeySkillsInput | string[]
    summary?: string | null
    matchedKeywords?: ResumeCreatematchedKeywordsInput | string[]
    missingKeywords?: ResumeCreatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ResumeUpdateWithoutUserInput = {
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    originalText?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    atsScore?: NullableIntFieldUpdateOperationsInput | number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeUpdatestrengthsInput | string[]
    weaknesses?: ResumeUpdateweaknessesInput | string[]
    suggestions?: ResumeUpdatesuggestionsInput | string[]
    keySkills?: ResumeUpdatekeySkillsInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    matchedKeywords?: ResumeUpdatematchedKeywordsInput | string[]
    missingKeywords?: ResumeUpdatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
    jobDescriptions?: JobDescriptionUpdateManyWithoutResumeNestedInput
    analysisHistory?: AnalysisHistoryUpdateManyWithoutResumeNestedInput
  }

  export type ResumeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    originalText?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    atsScore?: NullableIntFieldUpdateOperationsInput | number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeUpdatestrengthsInput | string[]
    weaknesses?: ResumeUpdateweaknessesInput | string[]
    suggestions?: ResumeUpdatesuggestionsInput | string[]
    keySkills?: ResumeUpdatekeySkillsInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    matchedKeywords?: ResumeUpdatematchedKeywordsInput | string[]
    missingKeywords?: ResumeUpdatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
    jobDescriptions?: JobDescriptionUncheckedUpdateManyWithoutResumeNestedInput
    analysisHistory?: AnalysisHistoryUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type ResumeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    originalText?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    atsScore?: NullableIntFieldUpdateOperationsInput | number | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    education?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    strengths?: ResumeUpdatestrengthsInput | string[]
    weaknesses?: ResumeUpdateweaknessesInput | string[]
    suggestions?: ResumeUpdatesuggestionsInput | string[]
    keySkills?: ResumeUpdatekeySkillsInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    matchedKeywords?: ResumeUpdatematchedKeywordsInput | string[]
    missingKeywords?: ResumeUpdatemissingKeywordsInput | string[]
    keywordDensity?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JobDescriptionCreateManyResumeInput = {
    id?: number
    jobTitle?: string | null
    company?: string | null
    description: string
    requiredKeywords?: JobDescriptionCreaterequiredKeywordsInput | string[]
    createdAt?: Date | string
  }

  export type AnalysisHistoryCreateManyResumeInput = {
    id?: number
    score: number
    analyzedAt?: Date | string
  }

  export type JobDescriptionUpdateWithoutResumeInput = {
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    requiredKeywords?: JobDescriptionUpdaterequiredKeywordsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobDescriptionUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    requiredKeywords?: JobDescriptionUpdaterequiredKeywordsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobDescriptionUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    requiredKeywords?: JobDescriptionUpdaterequiredKeywordsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalysisHistoryUpdateWithoutResumeInput = {
    score?: IntFieldUpdateOperationsInput | number
    analyzedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalysisHistoryUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    analyzedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalysisHistoryUncheckedUpdateManyWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    analyzedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResumeCountOutputTypeDefaultArgs instead
     */
    export type ResumeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResumeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResumeDefaultArgs instead
     */
    export type ResumeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResumeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobDescriptionDefaultArgs instead
     */
    export type JobDescriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobDescriptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AnalysisHistoryDefaultArgs instead
     */
    export type AnalysisHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AnalysisHistoryDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}